# This is not (yet) a full grammar. The parser is not auto-generated from this
# grammar.

# Type Arguments
typeargs <- '[' type (',' type)* ']'

# Types
# Binding is: ref, tuple, view, function, isect, union, throws
tupletype <- '(' (type (',' type)*)? ')'
typename <- ident typeargs?
modulename <- string typeargs?
typeref <- (modulename / typename) ('::' typename)*
captype <- 'iso' / 'mut' / 'imm' / 'Self' / typeref
viewtype <- (captype ('~>' / '<~'))* (captype / tupletype)
functiontype <- viewtype ('->' functiontype)?
isecttype <- functiontype ('&' functiontype)*
uniontype <- isecttype ('|' isecttype)*
type <- 'throws' uniontype / uniontype ('throws' uniontype)?

# Atoms
lambda <- '{' (typeparams? (param (',' param)*)? '=>')? (expr ';'*)* '}'
try <- 'try' lambda 'catch' '{' lambda* '}'
match <- 'match' postfix '{' lambda* '}'
when <- 'when' postfix lambda
new <- 'new' ('@' ident)? (tuple / typebody / type typebody)
tuple <- '(' (expr (',' expr)*)? ')'
constant <- string / character / float / int / hex / binary / 'true' / 'false'
ref <- [local] ident
atom <- staticref / ref / constant / tuple / new / when / try / match / lambda

# Operators
staticname <- name typeargs?
staticselect <- postfix ('::' staticname)+
staticref <- [nonlocal] staticname ('::' staticname)*
op <- staticref / staticselect

# Expressions
# Binding is: postfix, apply, infix, assign
postfix <- atom ('.' name / typeargs)*
apply <- op+ postfix* / postfix+
infix <- apply (op apply)*
throw <- 'throw' expr
decl <- ('let' / 'var') ident
expr <- (decl / throw / infix) oftype? ('=' expr)?

# Definitions
param <- ident oftype? initexpr? / expr
params <- '(' (param (',' param)*)? ')'

initexpr <- '=' expr
inittype <- '=' type
oftype <- ':' type
typeparam <- ident ofttype? inittype?
typeparams <- '[' typeparam (',' typeparam)* ']'
typebody <- '{' member* '}'

# Members
name <- symbol / ident
field <- ident oftype? initexpr? ';'
function <- name? typeparams? params oftype? (lambda / ';')
using <- 'using' typeref ';'
typealias <- 'type' ident typeparams? '=' type ';'
entity <- typeparams? oftype?
namedentity <- ident entity
interface <- 'interface' namedentity typebody
class <- 'class' namedentity typebody
module <- 'module' entity ';'
member <- module / class / interface / using / typealias / field / function

# Strings
string <- escapedstring / unescapedstring
escape <- '\\' ('"' / '\'' / ...)
escapedstring <- '"' (escape / !'"' .)* '"'
unescapedstring <- '\'[n]"' (unescapedstring[n] / !('"\'[n]') .)* '"\'[n]'
character <- '\'' (!'\'' .)* '\''

# This is not (yet) a full grammar. The parser is not auto-generated from this
# grammar.

# Type Arguments
typeargs <- '[' type (',' type)* ']'

# Types
# Binding is: ref, tuple, view, function, isect, union
tupletype <- '(' (type (',' type)*)? ')'
typename <- ident typeargs?
modulename <- string typeargs?
typeref <- (modulename / typename) ('::' typename)*
captype <- 'iso' / 'mut' / 'imm' / typeref
viewtype <- (captype ('~>' / '<~'))* (captype / tupletype)
functiontype <- viewtype ('->' functiontype)?
isecttype <- functiontype ('&' functiontype)*
uniontype <- isecttype ('|' isecttype)*
type <- uniontype

# Block Expressions
lambda <- (signature / ident) '=>' expr
case <- atom ('if' tuple)? block
match <- 'match' tuple '{' case* '}'
for <- 'for' '(' expr 'in' expr ')' block
while <- 'while' tuple block
if <- 'if' tuple block ('else' block)?
when <- 'when' tuple block
controlflow <- 'break' / 'continue' / 'return' expr? / 'yield' expr? / expr
block <- '{' (expr ';'*)* controlflow? '}'
blockexpr <- block / when / match / if / while / for / match / lambda

# Atoms
declelem <- (ident / '(' declelem (',' declelem)* ')') oftype?
decl <- ('let' / 'var') declelem
new <- 'new' (tuple / typebody / type typebody) ('in' ident)?
tuple <- '(' expr (',' expr)* ')' oftype?
constant <- string / character / float / int / hex / binary / 'true' / 'false'
ref <- [local] ident oftype?
### TODO: new and decl probably shouldn't be here
atom <- staticref / ref / constant / tuple / new / decl

# Operators
staticname <- name typeargs?
staticselect <- postfix ('::' staticname)+
staticref <- [nonlocal] staticname ('::' staticname)*
op <- staticref / staticselect

# Expressions
# Binding is: postfix, apply, infix, assign
postfix <- atom ('.' name / typeargs)*
apply <- op+ postfix* / postfix+
applyblock <- apply? blockexpr
infix <- apply (op apply)*
inblock <- applyblock / infix (op applyblock)?
assign <- infix ('=' expr)?
expr <- inblock / assign

# Definitions
param <- ident oftype? initexpr?
params <- '(' param* ')'
throws <- 'throws' type
signature <- typeparams? params oftype? throws?

initexpr <- '=' expr
inittype <- '=' type
oftype <- ':' type
typeparam <- ident ofttype? inittype?
typeparams <- '[' typeparam (',' typeparam)* ']'
typebody <- '{' member* '}'

# Members
name <- symbol / ident
field <- ident oftype? initexpr? ';'
function <- name? signature (block / ';')
using <- 'using' typeref ';'
typealias <- 'type' ident typeparams? '=' type ';'
entity <- typeparams? oftype?
namedentity <- ident entity
interface <- 'interface' namedentity typebody
class <- 'class' namedentity typebody
module <- 'module' entity ';'
member <- module / class / interface / using / typealias / field / function

# Strings
string <- escapedstring / unescapedstring
escape <- '\\' ('"' / '\'' / ...)
escapedstring <- '"' (escape / !'"' .)* '"'
unescapedstring <- '\'[n]"' (unescapedstring[n] / !('"\'[n]') .)* '"\'[n]'
character <- '\'' (!'\'' .)* '\''

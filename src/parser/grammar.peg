# The parser is not auto-generated from this grammar.

# Type Arguments
typeargs <- '[' type (',' type)* ']'

# Types
# Binding is: ref, tuple, view, function, isect, throw, union
tupletype <- '(' (type (',' type)*)? ')'
typelist <- ident '...'
typename <- ident typeargs?
modulename <- string typeargs?
typeref <- (modulename / typename) ('::' typename)*
captype <- 'iso' / 'mut' / 'imm' / 'Self' / tupletype / typelist / typeref
viewtype <- captype (('~>' / '<~') captype)*
functiontype <- viewtype ('->' functiontype)?
isecttype <- functiontype ('&' functiontype)*
throwtype <- 'throw'? isecttype
uniontype <- throwtype ('|' throwtype)*
type <- uniontype

# Atoms
lambda <- '{' (typeparams? (param (',' param)*)? '=>')? (expr ';'*)* '}'
try <- 'try' lambda 'catch' '{' lambda* '}'
match <- 'match' postfix '{' lambda* '}'
when <- 'when' postfix lambda
new <- 'new' ('@' ident)? (tuple / typebody / type typebody)
tuple <- '(' (expr (',' expr)*)? ')'
constant <- string / character / float / int / hex / binary / 'true' / 'false'
ref <- [local] ident

# Expressions
atom <- tuple / constant / new / when / try / match / lambda
selector <- name typeargs? ('::' name typeargs?)*
select <- ('.' selector / typeargs) tuple?
postfix <- (atom / ref typeargs? tuple?) select*
infix <- (postfix / selector)+
throw <- 'throw' expr
decl <- ('let' / 'var') ident
expr <- (decl / throw / infix) oftype? ('=' expr)?

# Definitions
param <- ident oftype? initexpr? / expr
params <- '(' (param (',' param)*)? ')'

initexpr <- '=' expr
inittype <- '=' type
oftype <- ':' type
typeparam <- ident '...'? ofttype? inittype?
typeparams <- '[' typeparam (',' typeparam)* ']'
typebody <- '{' member* '}'

# Members
name <- symbol / ident
field <- ident oftype? initexpr? ';'
function <- name? typeparams? params oftype? (lambda / ';')
using <- 'using' typeref ';'
typealias <- 'type' ident typeparams? '=' type ';'
entity <- typeparams? oftype?
namedentity <- ident entity
interface <- 'interface' namedentity typebody
class <- 'class' namedentity typebody
module <- 'module' entity ';'
member <- module / class / interface / using / typealias / field / function

# Strings
string <- escapedstring / unescapedstring
escape <- '\\' ('"' / '\'' / ...)
escapedstring <- '"' (escape / !'"' .)* '"'
unescapedstring <- '\'[n]"' (unescapedstring[n] / !('"\'[n]') .)* '"\'[n]'
character <- '\'' (!'\'' .)* '\''

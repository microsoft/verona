// Copyright Microsoft and Project Verona Contributors.
// SPDX-License-Identifier: MIT

/**
 * This file contains the start of the standard library. It is just enough to 
 * get a few examples working.
 * 
 * Nothing in here is expected to remain long-term without significant change.
 **/

class Builtin {
  // Selection of print functions that simply pass to the underlying C++
  // formatter.  This is a hack to get some examples with output until we have 
  // implemented IO.
  builtin print(format: String);
  builtin print1[T0](format: String, arg0: T0);
  builtin print2[T0, T1](format: String, arg0: T0, arg1: T1);
  builtin print3[T0, T1, T2](format: String, arg0: T0, arg1: T1, arg2: T2);
  builtin print4[T0, T1, T2, T3](format: String, arg0: T0, arg1: T1, arg2: T2, arg3: T3);
  builtin print5[T0, T1, T2, T3, T4](format: String, arg0: T0, arg1: T1, arg2: T2, arg3: T3, arg4: T4);

  // Freeze an isolated object graph
  builtin freeze[class T](x: T & iso): T & imm;

  // This exposes trace on a traceable region
  // TODO: invalidate other references into this region
  // TODO: needs expanding as we add other region allocation strategies
  builtin trace(x : mut);
}

/**
 * Simple None class that is used in examples.
 **/
class None {
  create(): None & imm {
    Builtin.freeze (new None)
  }
}

/**
 * Class for boxing a U64. Useful until we have property support for primitives
 * in all the correct places.
 **/
class U64Obj
{
  v: U64 & imm;
  create(x: U64 & imm) : U64Obj & iso
  {
    var o = new U64Obj;
    o.v = x;
    o
  }

  print(p : U64Obj & mut)
  {
    Builtin.print1("{}\n", p.v);
  }
}

primitive cown[class T] {
  builtin create(value: T & iso): cown[T] & imm;

  // Temporary API to implement promises
  // This should not be used outside the standard library.
  builtin _create_sleeping(): cown[T] & imm;
  builtin _fulfill_sleeping(self: imm, v: T & iso);
}

/**
 * This is the implementation of promises. It should be surfaced more nicely to
 * the programmer, but is type safe.
 **/ 
class Promise[class T]
{
  inner_cown: cown[T] & imm;

  create(): Promise[T] & iso
  { 
    var p = new Promise;
    p.inner_cown = cown._create_sleeping();
    p
  } 

  wait_handle(self: mut): cown[T] & imm
  { 
    self.inner_cown
  }

  fulfill(self: iso, v: T & iso)
  { 
    (self.inner_cown)._fulfill_sleeping(v); 
  }
}

primitive U64 {
  builtin add(self: imm, other: U64 & imm): U64 & imm;
  builtin sub(self: imm, other: U64 & imm): U64 & imm;
  builtin mul(self: imm, other: U64 & imm): U64 & imm;
  builtin div(self: imm, other: U64 & imm): U64 & imm;
  builtin mod(self: imm, other: U64 & imm): U64 & imm;
  builtin shl(self: imm, other: U64 & imm): U64 & imm;
  builtin shr(self: imm, other: U64 & imm): U64 & imm;
  builtin lt(self: imm, other: U64 & imm): U64 & imm;
  builtin gt(self: imm, other: U64 & imm): U64 & imm;
  builtin le(self: imm, other: U64 & imm): U64 & imm;
  builtin ge(self: imm, other: U64 & imm): U64 & imm;
  builtin eq(self: imm, other: U64 & imm): U64 & imm;
  builtin ne(self: imm, other: U64 & imm): U64 & imm;
  builtin and(self: imm, other: U64 & imm): U64 & imm;
  builtin or(self: imm, other: U64 & imm): U64 & imm;
}

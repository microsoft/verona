// Copyright Microsoft and Project Verona Contributors.
// SPDX-License-Identifier: MIT
using "controlflow";
using "numbers";
using "variadic";

class Array[T]
{
  class OutOfBounds {}

  _count: USize;
  _space: USize;

  create[R: Array[T], U...: R~>T](x: U...): R
  {
    let self = new ();
    self.resize(length(x));
    self.pushn(x);
    self
  }

  [S: Array[T]](self: S, i: USize): S~>T | throw OutOfBounds
  {
    if (i < _count)
    {
      // TODO: builtin, return index i
    }
    else
    {
      throw OutOfBounds
    }
  }

  push[S: Array[T] & mut](self: S, x: S~>T)
  {
    // TODO: builtin, append x to self
  }

  pushn[S: Array[T] & mut, U...: S~>T](self: S, x: U...)
  {
    match x
    {
      { () => }
      { hd, tl => self.push(hd); self.pushn(tl) }
    }
  }

  resize(self: Array[T] & mut, space: USize)
  {
    if (self._space < space)
    {
      // TODO: builtin, realloc
    }
  }
}

class Option[T]: Iterator[T]
{
  v: T | None;

  // v needs to be capturable by return
  // T: r -> S: r
  // T: iso -> T: iso
  // T: imm -> T: iso
  create[S: Option[T]](v: S<~T | None = None): S
  {
    new (v)
  }

  has_value(self: Option[T]): Bool
  {
    match self.v
    {
      { None => false }
      { true }
    }
  }

  // return remains captured by self
  // S: r, T: imm -> return imm
  // S: r, T: mut -> return r
  // S: r, T: iso -> return sub-r (sub-r must be transitive)
  // S: iso, T: imm -> return imm
  // S: iso, T: mut -> return iso (new sentinal for region)
  // S: iso, T: iso -> return iso (different region)
  // S: imm, T: _ -> return imm
  apply[S: Option[T]](self: S): S~>T throws Empty
  {
    match (self.v)
    {
      { v: S~>T => v }
      { throw Empty }
    }
  }

  value_or[S: Option[T], U](self: S, default: U): S~>T | U
  {
    match (self.v)
    {
      { v: S~>T => v }
      { default }
    }
  }

  // return from self
  // S: r, T: imm -> return imm
  // S: r, T: mut -> return r
  // S: r, T: iso -> return iso
  extract[S: Option[T] & mut](self: S): S<~T throws Empty
  {
    match (self.v)
    {
      { v: S<~T => self.v = None }
      { throw Empty }
    }
  }

  extract_or[S: Option[T] & mut, U](self: S, default: U): S<~T | U
  {
    match (self.v)
    {
      { v: S<~T => self.v = None }
      { default }
    }
  }
}

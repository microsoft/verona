# TODO:
# error handling
# getter, setter, rest/spread
# value constraints

module <- (moduledef / classdef / typedef / field / function)*
moduledef <- 'module' typeparams oftype constraints ';'
classdef <- 'class' id typeparams oftype constraints typebody
typedef <- 'type' id typeparams oftype constraints '=' type ';'
typebody <- '{' (classdef / typedef / field / function)* '}'

typeparams <- ('[' list(typeparam)? ']')?
typeparam <- id
constraints <- constraint*
constraint <- 'where' id oftype inittype

field <- qualifier id oftype initexpr ';'
qualifier <- (static / private)*
static <- 'static'
private <- 'private'

function <- qualifier funcname sig (block / ';')
funcname <- (id / sym)?
sig <- typeparams params oftype constraints
params <- '(' list(param)? ')'
param <- namedparam / type
namedparam <- id oftype initexpr

type <- type_one (type_op type_one)*
type_op <- <'&' / '|'>
type_one <-
  type_tuple /
  type_ref /
  module_ref /
  typebody
type_tuple <- '(' list(type)? ')'
type_ref <- (id typeargs?) ('.' id typeargs?)*
module_ref <- string typeargs?

typeargs <- '[' list(typearg) ']'
typearg <- type / expr

oftype <- (':' type)?
inittype <- ('=' type)?
initexpr <- ('=' expr)?

seq <- term* expr?
term <- atom* (blockexpr / ';')
expr <- blockexpr / atom+ blockexpr?

blockexpr <- block / when / while / match / if / for / classdef / typedef
block <- '{' seq '}'
when <- 'when' tuple block
while <- 'while' cond block
match <- 'match' cond '{' case* '}'
if <- 'if' cond block else
for <- 'for' '(' list(expr) 'in' seq ')' block

cond <- '(' seq ')'
else <- ('else' (if / block))?
case <- pattern guard block
pattern <- expr
guard <- ('if' '(' seq ')')?

atom <-
  break / continue / return / yield / let / new / lambda /
  hex / binary / float / int / interp_string / string / bool /
  id / sym / tuple / typeargs

break <- 'break'
continue <- 'continue'
return <- 'return'
yield <- 'yield'
let <- 'let' (id / '(' list(id)? ')') oftype
new <- 'new' type? typebody? inregion?
inregion <- 'in' id
lambda <- sig block
tuple <- '(' list(expr)? ')'

keyword <-
  'module' / 'type' / 'class' / 'where' / 'static' / 'private' /
  'if' / 'else' / 'while' / 'for' / 'in' / 'match' / 'when' /
  'break' / 'continue' / 'return' / 'yield' /
  'let' / 'new'

id <- <!keyword %word>
sym <- <[!#-'*+\x2D./:<-@\\^`|~]+> # Reserved: , _ " () [] {} ;

float <- <digits '.' digits ([eE][-+]? digits)?>
int <- <digits>
digits <- [0-9][_0-9]*
hex <- <'0x' [_0-9a-fA-F]*>
binary <- <'0b' [_01]*>
bool <- 'true' / 'false'

string <- ["] <('\\"' / !'"' .)*> '"'
interp_string <- ["][{] (unquote / quote)* '}"'
unquote <- [$] !keyword %word / '${' expr [}]
quote <- <(nested_string / !unquote !'}"' .)+>
nested_string <- '"{' nested_quote* '}"'
nested_quote <- <(nested_string / !'}"' .)+>

list(x) <- x (',' x)*

blank <- [ \t\r\n]+
linecomment <- '//' (![\r\n] .)*
nestedcomment <- '/*' ((!'/*' !'*/' .) / nestedcomment)* '*/'
%whitespace <- (blank / linecomment / nestedcomment)*
%word <- [_a-zA-Z][_a-zA-Z0-9']*

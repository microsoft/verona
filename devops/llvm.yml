resources:
  repositories:
  - repository: llvm
    type: github
    endpoint: LLVMServiceConnection
    name: llvm/llvm-project

jobs:
############################################## Linux Builds
- job:
  displayName: LLVM Linux Build
  pool: verona-llvm-build-linux
  timeoutInMinutes: 120
  strategy:
    matrix:
      Clang Release:
        CC: clang
        CXX: clang++
        CXXFLAGS: -stdlib=libstdc++
        BuildType: Release
        BuildName: release
        Sanitizer:
  variables:
  - name: PKG_NAME
    value: verona-llvm-install-x86_64-linux-$(BuildName)-$(GOOD_HASH)
  steps:
  - checkout: llvm

  - script: |
      set -eo pipefail
      git checkout master
      git pull
      git checkout $(GOOD_HASH)
    displayName: 'Move tree to known good LLVM commit for Verona'

  - script: |
      set -eo pipefail
      sudo apt-get update
      sudo apt-get install -y clang ninja-build lld
      sudo snap install cmake --classic
      curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
    displayName: 'Install Build Dependencies'

  - task: CMake@1
    displayName: 'CMake'
    inputs:
      cmakeArgs: |
        ../llvm -GNinja -DCMAKE_BUILD_TYPE=$(BuildType) -DCMAKE_C_COMPILER=$(CC) -DCMAKE_CXX_COMPILER=$(CXX) -DCMAKE_CXX_FLAGS=$(CXXFLAGS) -DLLVM_USE_SANITIZER=$(Sanitizer) -DLLVM_ENABLE_PROJECTS=mlir -DLLVM_TARGETS_TO_BUILD="X86" -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_ENABLE_LLD=ON -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DCMAKE_INSTALL_PREFIX=install

  - script: |
      set -eo pipefail
      ninja install
    workingDirectory: build
    displayName: 'Compile LLVM & MLIR'

  - script: |
      set -eo pipefail
      rm -f $(PKG_NAME).tar.gz
      tar zcf $(PKG_NAME).tar.gz build/install
      md5sum $(PKG_NAME).tar.gz | awk '{print $1}' > $(PKG_NAME).tar.gz.md5
    displayName: 'Create package'

  - script: |
      set -eo pipefail
      az storage blob upload --container-name llvmbuild --file $(PKG_NAME).tar.gz --name $(PKG_NAME) --connection-string "$(BLOB_CONNECTION_STRING)"
      az storage blob upload --container-name llvmbuild --file $(PKG_NAME).tar.gz.md5 --name $(PKG_NAME).md5 --connection-string "$(BLOB_CONNECTION_STRING)"
    displayName: 'Upload package'

############################################## Windows Builds
- job:
  displayName: LLVM Windows Build
  pool: verona-llvm-build-windows
  timeoutInMinutes: 120
  strategy:
    matrix:
      Release:
        BuildType: Release
        BuildName: release
  variables:
  - name: PKG_NAME
    value: verona-llvm-install-x86_64-windows-$(BuildName)-$(GOOD_HASH)

  steps:
  - checkout: llvm

  - powershell: |
      Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\AzureCLI.msi; Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'; rm .\AzureCLI.msi
    displayName: 'Install Azure CLI'

  - powershell: |
      Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
    displayName: 'Install Choco'

  - powershell: |
      C:\ProgramData\chocolatey\bin\choco install --accept-license -y cmake
    displayName: 'Install CMake'

  - script: |
      git checkout master
      git pull
      git checkout $(GOOD_HASH)
    displayName: 'Prepare tree'

  - script: |
      rd /s /q build
      mkdir build
      cd build
      "C:\Program Files\CMake\bin\cmake.exe" ..\llvm -G"Visual Studio 16 2019" -DLLVM_ENABLE_PROJECTS=mlir -DLLVM_TARGETS_TO_BUILD="X86" -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DCMAKE_INSTALL_PREFIX=install
    displayName: 'CMake'

  - task: MSBuild@1
    displayName: 'Build LLVM'
    inputs:
      solution: build/INSTALL.vcxproj
      msbuildArguments: '/m /p:Configuration=$(BuildType)'

  - script: |
      rd /s /q $(PKG_NAME).tar.gz
      tar.exe -z -c -f $(PKG_NAME).tar.gz build/install
    displayName: 'Create package'

  - powershell:
      Get-FileHash $(PKG_NAME).tar.gz -Algorithm MD5 | Select-Object Hash | Format-Wide > $(PKG_NAME).tar.gz.md5
    displayName: 'Create MD5'

  - script: |
      "C:\Program Files (x86)\Microsoft SDKs\Azure\CLI2\wbin\az" storage blob upload --container-name llvmbuild --file $(PKG_NAME).tar.gz --name $(PKG_NAME) --connection-string "$(BLOB_CONNECTION_STRING)"
    displayName: 'Upload package'

  - script: |
      "C:\Program Files (x86)\Microsoft SDKs\Azure\CLI2\wbin\az" storage blob upload --container-name llvmbuild --file $(PKG_NAME).tar.gz.md5 --name $(PKG_NAME).md5 --connection-string "$(BLOB_CONNECTION_STRING)"
    displayName: 'Upload MD5'

############################################## MacOS Builds
- job:
  displayName: LLVM MacOS Build
  pool:
    vmImage: 'macOS-10.14'
  timeoutInMinutes: 240
  strategy:
    matrix:
      Release:
        BuildType: Release
        BuildName: release
  variables:
  - name: PKG_NAME
    value: verona-llvm-install-x86_64-darwin-$(BuildName)-$(GOOD_HASH)
  steps:
  - checkout: llvm

  - script: |
      set -eo pipefail
      git checkout master
      git pull
      git checkout $(GOOD_HASH)
    displayName: 'Move tree to known good LLVM commit for Verona'

  - task: CMake@1
    displayName: 'CMake'
    inputs:
      cmakeArgs: |
        ../llvm -DCMAKE_BUILD_TYPE=$(BuildType) -DLLVM_ENABLE_PROJECTS=mlir -DLLVM_TARGETS_TO_BUILD="X86" -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DCMAKE_INSTALL_PREFIX=install

  - script: |
      set -eo pipefail
      N=$(sysctl -n hw.ncpu)
      make -j $N install
    workingDirectory: build
    displayName: 'Compile LLVM & MLIR'

  - script: |
      set -eo pipefail
      rm -f $(PKG_NAME).tar.gz
      tar zcf $(PKG_NAME).tar.gz build/install
      md5 -r $(PKG_NAME).tar.gz | awk '{print $1}' > $(PKG_NAME).tar.gz.md5
    displayName: 'Create package'

  - script: |
      set -eo pipefail
      az storage blob upload --container-name llvmbuild --file $(PKG_NAME).tar.gz --name $(PKG_NAME) --connection-string "$(BLOB_CONNECTION_STRING)"
      az storage blob upload --container-name llvmbuild --file $(PKG_NAME).tar.gz.md5 --name $(PKG_NAME).md5 --connection-string "$(BLOB_CONNECTION_STRING)"
    displayName: 'Upload package'

resources:
- repo: self

trigger: none

pr:
- master

jobs:
############################################## Configure CI Run
- job: ConfigureCIRun
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script: |
      echo "Determine if any code has changed."
      if git diff --ignore-submodules=dirty --quiet origin/master -- ':!docs' ':!experiments' ':!*.md'; then
        echo " - Documentation change only"
        echo "##vso[task.setvariable variable=docOnly;isOutput=true]true" #set variable docOnly to true
      else
        echo " - Source has changed"
        echo "##vso[task.setvariable variable=docOnly;isOutput=true]false" #set variable docOnly to false
      fi

      echo "Determine if runtime changed."
      if git diff --ignore-submodules=dirty --quiet origin/master -- src/rt; then
        echo " - Runtime is unchanged!"
        echo "##vso[task.setvariable variable=testRuntime;isOutput=true]Off" #set variable testRuntime to Off
      else
        echo " - Runtime has changed!"
        echo "##vso[task.setvariable variable=testRuntime;isOutput=true]On" #set variable testRuntime to On
      fi
    displayName: 'Check for runtime changes'
    name: setVarStep

############################################## Linux Builds
- job: 
  displayName: Linux
  dependsOn: ConfigureCIRun
  condition: eq(dependencies.ConfigureCIRun.outputs['setVarStep.docOnly'], 'false')
  variables:
    RTTests: $[ dependencies.ConfigureCIRun.outputs['setVarStep.testRuntime'] ]
  pool:
    vmImage: 'ubuntu-18.04'
  timeoutInMinutes: 120
  strategy:
    matrix:
      GCC Release:
        CC: gcc
        CXX: g++
        CXXFLAGS:
        BuildType: Release
        Asan: Off
      Clang RelDbg+ASAN:
        CC: clang
        CXX: clang++
        CXXFLAGS: -stdlib=libstdc++
        BuildType: RelWithDebInfo
        Asan: On
  steps:
  - checkout: self

  - script: |
      set -eo pipefail
      git submodule init
      git submodule update --depth 1 --recursive
    displayName: 'Checkout submodules'

  - script: |
      set -eo pipefail
      sudo apt-get update
      sudo apt-get install -y ninja-build
      sudo apt-get remove --purge cmake
      sudo snap install cmake --classic
      sudo pip install wheel OutputCheck
    displayName: 'Dependencies'

  - task: CMake@1
    displayName: 'CMake'
    inputs:
      cmakeArgs: |
        .. -GNinja -DCMAKE_BUILD_TYPE=$(BuildType) -DCMAKE_C_COMPILER=$(CC) -DCMAKE_CXX_COMPILER=$(CXX) -DCMAKE_CXX_FLAGS=$(CXXFLAGS) -DENABLE_ASSERTS=ON -DUSE_ASAN=$(Asan) -DVERONA_CI_BUILD=On -DRT_TESTS=$(RTTests)

  - script: |
      set -eo pipefail
      ninja
    workingDirectory: build
    displayName: 'Compile'

  - script: |
      set -eo pipefail
      export ASAN_SYMBOLIZER_PATH=/usr/lib/llvm-6.0/bin/llvm-symbolizer
      export ASAN_OPTIONS="alloc_dealloc_mismatch=0 symbolize=1"
      ninja check
    workingDirectory: build
    displayName: 'Tests'

############################################## Windows Builds
- job: 
  displayName: Windows
  dependsOn: ConfigureCIRun
  condition: eq(dependencies.ConfigureCIRun.outputs['setVarStep.docOnly'], 'false')
  variables:
    RTTests: $[ dependencies.ConfigureCIRun.outputs['setVarStep.testRuntime'] ]
  pool:
    vmImage: 'windows-2019'
  timeoutInMinutes: 120
  strategy:
    matrix:
      Release:
        CXXFLAGS: '/EHsc /D _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING=1'
        BuildType: Release

  steps:
  - checkout: self

  - script: |
      git submodule init
      git submodule update --depth 1 --recursive
    displayName: 'Checkout submodules'

  - script:
      pip install OutputCheck
    displayName: 'Dependencies'

  - script: |
      mkdir build
      cd build
      cmake .. -G"Visual Studio 16 2019" -DENABLE_ASSERTS=ON -DVERONA_CI_BUILD=On -DRT_TESTS=$(RTTests) -DCMAKE_CXX_FLAGS="$(CXXFLAGS)"
    displayName: 'CMake'

  - task: MSBuild@1
    displayName: 'Compile'
    inputs:
      solution: build/verona.sln
      msbuildArguments: '/m /p:Configuration=$(BuildType)'

  - task: MSBuild@1
    displayName: 'Test'
    inputs:
      solution: build/check.vcxproj
      msbuildArguments: '/m /p:Configuration=$(BuildType)'

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'
    inputs:
      failOnAlert: true

############################################## MacOS Builds
- job: 
  displayName: MacOS
  dependsOn: ConfigureCIRun
  condition: eq(dependencies.ConfigureCIRun.outputs['setVarStep.docOnly'], 'false')
  variables:
    RTTests: $[ dependencies.ConfigureCIRun.outputs['setVarStep.testRuntime'] ]
  pool:
    vmImage: 'macOS-10.14'
  timeoutInMinutes: 120
  strategy:
    matrix:
      Release:
        BuildType: Release

  steps:
  - checkout: self

  - script: |
      set -eo pipefail
      git submodule init
      git submodule update --depth 1 --recursive
    displayName: 'Checkout submodules'

  - script: |
      set -eo pipefail
      sudo pip install wheel OutputCheck
    displayName: 'Dependencies'

  - task: CMake@1
    displayName: 'CMake'
    inputs:
      cmakeArgs: |
        .. -DCMAKE_BUILD_TYPE=$(BuildType) -DENABLE_ASSERTS=ON -DVERONA_CI_BUILD=On -DRT_TESTS=$(RTTests)

  - script: |
      set -eo pipefail
      N=$(sysctl -n hw.ncpu)
      make -j $N
    workingDirectory: build
    displayName: 'Compile'

  - script: |
      set -eo pipefail
      make check
    workingDirectory: build/
    displayName: 'Tests'

############################################## Clang Format Check
- job: 
  displayName: Format
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - checkout: self

  - script: |
      set -eo pipefail
      git submodule init
      git submodule update --depth 1 --recursive
    displayName: 'Update submodules'

  - script: |
      set -eo pipefail
      wget -q -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
      sudo apt-add-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main"
      sudo apt-get update
      sudo apt-get install -y clang-format-9 clang-tidy-9
      sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-9 100
    displayName: 'Install Clang tools'

  - task: CMake@1
    displayName: 'CMake'
    inputs:
      cmakeArgs: |
        ..

  - script: |
      set -eo pipefail
      make clangformat
      git diff --ignore-submodules=dirty --exit-code $(Build.SourceVersion)
    workingDirectory: build
    displayName: 'Clang-Format'

  - script: |
      set -eo pipefail
      files=`git ls-files -- '*.cpp' '*.cc' '*.h' '*.hh' '*.verona' '*.td' '*.mlir' | xargs`
      grep -L "Copyright Microsoft and Project Verona Contributors."  $files | tee header_missing
      [ ! -s header_missing ]
      grep -L "SPDX-License-Identifier: MIT" $files | tee header_missing
      [ ! -s header_missing ]
    displayName: 'Check Copyright and License'

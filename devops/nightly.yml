resources:
- repo: self

trigger: none

pr:
- master

schedules:
- cron: "0 0 * * *"
  displayName: Daily midnight build
  branches:
    include:
    - master

jobs:
############################################## Configure CI Run
- job: ConfigureCIRun
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - script: |
      if [ -z "$(LLVMCommit)" ]; then
        echo "LLVMCommit empty, picking from submodule"
        LLVMCommit=$(git submodule status external/llvm-project | grep -o "[0-9a-f]\{11\}" | head -n 1)
      else
        LLVMCommit=$(LLVMCommit)
      fi
      echo "LLVMCommit: $LLVMCommit"
      echo "##vso[task.setvariable variable=LLVMCommit;isOutput=true]$LLVMCommit"
    displayName: 'Check for runtime changes'
    name: setVarStep

############################################## Linux Builds
- job:
  displayName: Linux
  dependsOn: ConfigureCIRun
  variables:
    LLVMCommit: $[ dependencies.ConfigureCIRun.outputs['setVarStep.LLVMCommit'] ]
  pool:
    vmImage: 'ubuntu-18.04'
  timeoutInMinutes: 120
  strategy:
    matrix:
      # GCC Debug:
      #   CC: gcc
      #   CXX: g++
      #   CXXFLAGS:
      #   BuildType: Debug
      #   Asan: Off
      # GCC Release:
      #   CC: gcc
      #   CXX: g++
      #   CXXFLAGS:
      #   Asan: Off
      #   BuildType: Release
      Clang Debug:
        CC: clang
        CXX: clang++
        CXXFLAGS: -stdlib=libstdc++
        BuildType: Debug
        Asan: Off
      Clang Release:
        CC: clang
        CXX: clang++
        CXXFLAGS: -stdlib=libstdc++
        Asan: Off
        BuildType: Release
      Clang Debug (ASAN):
        CC: clang
        CXX: clang++
        CXXFLAGS: -stdlib=libstdc++
        BuildType: Debug
        Asan: On
      Clang Release (ASAN):
        CC: clang
        CXX: clang++
        CXXFLAGS: -stdlib=libstdc++
        BuildType: Release
        Asan: On
  steps:
  - checkout: self

  - script: |
      set -eo pipefail
      git submodule init
      git submodule update --depth 1 --recursive
    displayName: 'Checkout submodules'

  - script:
      echo "##vso[task.setvariable variable=PKG_NAME]verona-llvm-x86_64-linux-release-$(LLVMCommit)"
    displayName: 'Set LLVM Package'

  - script: |
      set -eo pipefail
      wget -q -O $(PKG_NAME).tar.gz https://verona.blob.core.windows.net/llvmbuild/$(PKG_NAME)
    displayName: 'Download package'

  - bash: |
      set -eo pipefail
      ./utils/llvm/setup-llvm-builddir.sh $(PKG_NAME).tar.gz
    displayName: 'Setup LLVM Build dir'
    workingDirectory: '$(Build.SourcesDirectory)'

  - script: |
      set -eo pipefail
      sudo apt-get update
      sudo apt-get install -y ninja-build
      sudo pip install wheel OutputCheck
    displayName: 'Dependencies'

  - task: CMake@1
    displayName: 'CMake'
    inputs:
      cmakeArgs: |
        .. -GNinja -DCMAKE_BUILD_TYPE=$(BuildType) -DCMAKE_C_COMPILER=$(CC) -DCMAKE_CXX_COMPILER=$(CXX) -DCMAKE_CXX_FLAGS=$(CXXFLAGS) -DENABLE_ASSERTS=ON -DUSE_ASAN=$(Asan) -DVERONA_CI_BUILD=On -DSNMALLOC_CI_BUILD=On -DRT_TESTS=ON

  - script: |
      set -eo pipefail
      ninja install
    workingDirectory: build
    displayName: 'Compile'

  - script: |
      set -eo pipefail
      export ASAN_SYMBOLIZER_PATH=/usr/lib/llvm-6.0/bin/llvm-symbolizer
      export ASAN_OPTIONS="alloc_dealloc_mismatch=0 symbolize=1"
      ctest -j 4 -E "([1-9][0-9]00|[4-9]00)" --timeout 400 --output-on-failure
    workingDirectory: build
    displayName: 'Tests'

############################################## Windows Builds
- job:
  displayName: Windows
  dependsOn: ConfigureCIRun
  variables:
    LLVMCommit: $[ dependencies.ConfigureCIRun.outputs['setVarStep.LLVMCommit'] ]
  pool:
    vmImage: 'windows-2019'
  timeoutInMinutes: 120
  strategy:
    matrix:
      RelWithDebInfo:
        CXXFLAGS: '/EHsc /D _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING=1'
        BuildType: RelWithDebInfo
      Release:
        CXXFLAGS: '/EHsc /D _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING=1'
        BuildType: Release

  steps:
  - checkout: self

  - script: |
      git submodule init
      git submodule update --depth 1 --recursive
    displayName: 'Checkout submodules'

  - script:
      pip install OutputCheck
    displayName: 'Dependencies'

  - bash:
      echo "##vso[task.setvariable variable=PKG_NAME]verona-llvm-x86_64-windows-release-$(LLVMCommit)"
    displayName: 'Set LLVM Package'

  - powershell: |
      $ProgressPreference = 'SilentlyContinue'; (New-Object Net.WebClient).DownloadFile("https://verona.blob.core.windows.net/llvmbuild/$(PKG_NAME)", "$(PKG_NAME).tar.gz")
    displayName: 'Download package'

  - bash: |
      ./utils/llvm/setup-llvm-builddir.sh $(PKG_NAME).tar.gz
    displayName: 'Setup LLVM Build dir'
    workingDirectory: '$(Build.SourcesDirectory)'

  - bash: |
      cd external/llvm-project/build
      if [ ! -f $(BuildType)/bin/mlir-tblgen ]; then
        echo "Copying LLVM Release binaries to $(BuildType)"
        mkdir -p $(BuildType)/bin
        cp -r Release/bin/* $(BuildType)/bin
        mkdir -p $(BuildType)/lib
        cp -r Release/lib/* $(BuildType)/lib
      fi
    displayName: 'Setup LLVM Binaries/Libraries'

  - script: |
      mkdir build
      cd build
      cmake .. -G"Visual Studio 16 2019" -DENABLE_ASSERTS=ON -DVERONA_CI_BUILD=On -DSNMALLOC_CI_BUILD=On -DRT_TESTS=ON -DCMAKE_CXX_FLAGS="$(CXXFLAGS)"
    displayName: 'CMake'

  - task: MSBuild@1
    displayName: 'Compile'
    inputs:
      solution: build/INSTALL.vcxproj
      msbuildArguments: '/m /p:Configuration=$(BuildType)'

  - script: |
      ctest -j 4 -E "([1-9][0-9]00|[4-9]00)" --timeout 400 --output-on-failure --interactive-debug-mode 0 -C $(BuildType)
    workingDirectory: build/
    displayName: 'Tests'

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'
    inputs:
      failOnAlert: true

############################################## MacOS Builds
- job:
  displayName: macOS
  dependsOn: ConfigureCIRun
  variables:
    LLVMCommit: $[ dependencies.ConfigureCIRun.outputs['setVarStep.LLVMCommit'] ]
  pool:
    vmImage: 'macOS-10.14'
  timeoutInMinutes: 120
  strategy:
    matrix:
      Debug:
        BuildType: Debug
      Release:
        BuildType: Release

  steps:
  - checkout: self

  - script: |
      set -eo pipefail
      git submodule init
      git submodule update --depth 1 --recursive
    displayName: 'Checkout submodules'

  - script: |
      set -eo pipefail
      sudo pip install wheel OutputCheck
    displayName:  'Dependencies'

  - script:
      echo "##vso[task.setvariable variable=PKG_NAME]verona-llvm-x86_64-macos-release-$(LLVMCommit)"
    displayName: 'Set LLVM Package'

  - script: |
      set -eo pipefail
      curl -s --output $(PKG_NAME).tar.gz https://verona.blob.core.windows.net/llvmbuild/$(PKG_NAME)
    displayName: 'Download package'

  - bash: |
      set -eo pipefail
      ./utils/llvm/setup-llvm-builddir.sh $(PKG_NAME).tar.gz
    displayName: 'Setup LLVM Build dir'
    workingDirectory: '$(Build.SourcesDirectory)'

  - task: CMake@1
    displayName: 'CMake'
    inputs:
      cmakeArgs: |
        .. -DCMAKE_BUILD_TYPE=$(BuildType) -DENABLE_ASSERTS=ON -DVERONA_CI_BUILD=On -DSNMALLOC_CI_BUILD=On -DRT_TESTS=ON

  - script: |
      set -eo pipefail
      make -j 4 install
    workingDirectory: build
    displayName: 'Compile'

  - script: |
      set -eo pipefail
      ctest -j 4 -E "([1-9][0-9]00|[4-9]00)" --timeout 400 --output-on-failure
    workingDirectory: build/
    displayName: 'Tests'

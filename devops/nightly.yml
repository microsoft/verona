resources:
- repo: self

trigger: none

pr:
- master

schedules:
- cron: "0 0 * * *"
  displayName: Daily midnight build
  branches:
    include:
    - master

jobs:
- job:
  displayName: Linux
  pool:
    vmImage: 'ubuntu-18.04'
  strategy:
    matrix:
      GCC Debug:
        CC: gcc
        CXX: g++
        CXXFLAGS:
        BuildType: Debug
        Asan: Off
      GCC Release:
        CC: gcc
        CXX: g++
        CXXFLAGS:
        Asan: Off
        BuildType: Release
      Clang Debug:
        CC: clang
        CXX: clang++
        CXXFLAGS: -stdlib=libstdc++
        BuildType: Debug
        Asan: Off
      Clang Release:
        CC: clang
        CXX: clang++
        CXXFLAGS: -stdlib=libstdc++
        Asan: Off
        BuildType: Release
      Clang Debug (ASAN):
        CC: clang
        CXX: clang++
        CXXFLAGS: -stdlib=libstdc++
        BuildType: Debug
        Asan: On
      Clang Release (ASAN):
        CC: clang
        CXX: clang++
        CXXFLAGS: -stdlib=libstdc++
        BuildType: Release
        Asan: On
  steps:
  - checkout: self
    submodules: recursive

  - script: |
      set -eo pipefail
      sudo apt-get update
      sudo apt-get install -y ninja-build
      sudo pip install wheel OutputCheck
    displayName: 'Dependencies'

  - task: CMake@1
    displayName: 'CMake'
    inputs:
      cmakeArgs: |
        .. -GNinja -DCMAKE_BUILD_TYPE=$(BuildType) -DCMAKE_C_COMPILER=$(CC) -DCMAKE_CXX_COMPILER=$(CXX) -DCMAKE_CXX_FLAGS=$(CXXFLAGS) -DENABLE_ASSERTS=ON -DUSE_ASAN=$(Asan) -DVERONA_CI_BUILD=On -DSNMALLOC_CI_BUILD=On -DRT_TESTS=ON

  - script: |
      set -eo pipefail
      ninja install
    workingDirectory: build
    displayName: 'Compile'

  - script: |
      set -eo pipefail
      export ASAN_SYMBOLIZER_PATH=/usr/lib/llvm-6.0/bin/llvm-symbolizer
      export ASAN_OPTIONS="alloc_dealloc_mismatch=0 symbolize=1"
      ctest -j 4 -E "([1-9][0-9]00|[4-9]00)" --timeout 400 --output-on-failure
    workingDirectory: build
    displayName: 'Tests'

- job:
  displayName: Windows
  pool:
    vmImage: 'windows-2019'
  strategy:
    matrix:
      RelWithDebInfo:
        BuildType: RelWithDebInfo
      Release:
        BuildType: Release

  steps:
  - checkout: self
    submodules: recursive

  - script:
      pip install OutputCheck
    displayName: 'Dependencies'

  - script: |
      mkdir build
      cd build
      cmake .. -G"Visual Studio 16 2019" -DENABLE_ASSERTS=ON -DVERONA_CI_BUILD=On -DSNMALLOC_CI_BUILD=On -DRT_TESTS=ON
    displayName: 'CMake'

  - task: MSBuild@1
    displayName: 'Compile'
    inputs:
      solution: build/INSTALL.vcxproj
      msbuildArguments: '/m /p:Configuration=$(BuildType)'

  - script: |
      ctest -j 4 -E "([1-9][0-9]00|[4-9]00)" --timeout 400 --output-on-failure --interactive-debug-mode 0 -C $(BuildType)
    workingDirectory: build/
    displayName: 'Tests'

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'
    inputs:
      failOnAlert: true

- job:
  displayName: macOS
  pool:
    vmImage: 'macOS-10.14'
  strategy:
    matrix:
      Debug:
        BuildType: Debug
      Release:
        BuildType: Release

  steps:
  - checkout: self
    submodules: recursive

  - script: |
      set -eo pipefail
      sudo pip install wheel OutputCheck
    displayName:  'Dependencies'

  - task: CMake@1
    displayName: 'CMake'
    inputs:
      cmakeArgs: |
        .. -DCMAKE_BUILD_TYPE=$(BuildType) -DENABLE_ASSERTS=ON -DVERONA_CI_BUILD=On -DSNMALLOC_CI_BUILD=On -DRT_TESTS=ON

  - script: |
      set -eo pipefail
      make -j 4 install
    workingDirectory: build
    displayName: 'Compile'

  - script: |
      set -eo pipefail
      ctest -j 4 -E "([1-9][0-9]00|[4-9]00)" --timeout 400 --output-on-failure
    workingDirectory: build/
    displayName: 'Tests'

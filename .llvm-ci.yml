resources:
  repositories:
  - repository: llvm
    type: github
    endpoint: LLVMServiceConnection
    name: llvm/llvm-project

jobs:
############################################## Linux Builds
- job:
  displayName: LLVM Linux Build
  pool: verona-llvm-build-linux
  timeoutInMinutes: 120
  strategy:
    matrix:
      Clang Release:
        CC: clang
        CXX: clang++
        CXXFLAGS: -stdlib=libstdc++
        BuildType: Release
        BuildName: release
        Sanitizer:
      Clang Debug+ASAN:
        CC: clang
        CXX: clang++
        CXXFLAGS: -stdlib=libstdc++
        BuildType: Debug
        BuildName: debug
        Sanitizer: Address
  variables:
  - name: PKG_NAME
    value: verona-llvm-x86_64-linux-$(BuildName)-$(GOOD_HASH)
  steps:
  - checkout: llvm

  - script: |
      set -eo pipefail
      git checkout master
      git pull
      git checkout $(GOOD_HASH)
    displayName: 'Move tree to known good LLVM commit for Verona'

  - script: |
      set -eo pipefail
      sudo apt-get update
      sudo apt-get install -y clang ninja-build cmake lld
    displayName: 'Install Build Dependencies'

  - task: CMake@1
    displayName: 'CMake'
    inputs:
      cmakeArgs: |
        ../llvm -GNinja -DCMAKE_BUILD_TYPE=$(BuildType) -DCMAKE_C_COMPILER=$(CC) -DCMAKE_CXX_COMPILER=$(CXX) -DCMAKE_CXX_FLAGS=$(CXXFLAGS) -DLLVM_USE_SANITIZER=$(Sanitizer) -DLLVM_ENABLE_PROJECTS=mlir -DLLVM_TARGETS_TO_BUILD="X86" -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_ENABLE_LLD=ON -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON

  - script: |
      set -eo pipefail
      ninja
      VERSION=$(./bin/mlir-tblgen --version | grep -o "[0-9]\+\.[0-9]\+\.[0-9]\+" | cut -d "." -f 1,3)
      echo "##vso[task.setvariable variable=VERSION]$VERSION"
    workingDirectory: build
    displayName: 'Compile LLVM & MLIR'

  - script: |
      set -eo pipefail
      rm -rf /tmp/$PKG_NAME
      mkdir -p /tmp/$PKG_NAME
      tar zcf /tmp/$PKG_NAME/$PKG_NAME.tar.gz .
    displayName: 'Create artifact'

  - task: UniversalPackages@0
    displayName: 'Publishing Package'
    inputs:
      command: publish
      publishDirectory: /tmp/$(PKG_NAME)
      vstsFeedPublish: Project%20Verona/LLVMBuild
      vstsFeedPackagePublish: $(PKG_NAME)
      packagePublishDescription: 'Verona LLVM $(BuildType) Build for Linux at $(GOOD_HASH)'
      versionOption: custom
      versionPublish: $(VERSION).$(Build.Buildid)

############################################## Windows Builds
- job:
  displayName: LLVM Windows Build
  pool: verona-llvm-build-windows
  timeoutInMinutes: 120
  strategy:
    matrix:
      Debug:
        BuildType: Debug
        BuildName: debug
      Release:
        BuildType: Release
        BuildName: release
  variables:
  - name: PKG_NAME
    value: verona-llvm-x86_64-windows-$(BuildName)-$(GOOD_HASH)
  # TODO: Figure how to set version on Windows
  - name: VERSION
    value: 11.0

  steps:
  - checkout: llvm

  - task: PowerShell@2
    inputs:
      targetType: inline
      script:
        Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
    displayName: 'Install Choco'

  - task: PowerShell@2
    inputs:
      targetType: inline
      script:
        C:\ProgramData\chocolatey\bin\choco install --accept-license -y cmake
    displayName: 'Install CMake'

  - script: |
      git checkout master
      git pull
      git checkout $(GOOD_HASH)
    displayName: 'Prepare tree'

  - script: |
      rd /s /q build
      mkdir build
      cd build
      "C:\Program Files\CMake\bin\cmake.exe" ..\llvm -G"Visual Studio 16 2019" -DLLVM_ENABLE_PROJECTS=mlir -DLLVM_TARGETS_TO_BUILD="X86" -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON
    displayName: 'CMake'

  - task: MSBuild@1
    displayName: 'Build LLVM'
    inputs:
      solution: build/INSTALL.vcxproj
      msbuildArguments: '/m /p:Configuration=$(BuildType)'

  - script: |
      rd /s /q $(PKG_NAME)
      mkdir $(PKG_NAME)
      # We only cache the build directory, the sources will be checked out by the submodule
      tar.exe -z -c -f $(PKG_NAME)/$(PKG_NAME).tar.gz build
    displayName: 'Create artifact'

  - task: UniversalPackages@0
    displayName: 'Publishing Package'
    inputs:
      command: publish
      publishDirectory: $(PKG_NAME)
      vstsFeedPublish: Project%20Verona/LLVMBuild
      vstsFeedPackagePublish: $(PKG_NAME)
      packagePublishDescription: 'Verona LLVM $(BuildType) Build for Windows at $(GOOD_HASH)'
      versionOption: custom
      versionPublish: $(VERSION).$(Build.Buildid)

############################################## MacOS Builds
- job:
  displayName: LLVM MacOS Build
  pool:
    vmImage: 'macOS-10.14'
  timeoutInMinutes: 240
  strategy:
    matrix:
      Release:
        BuildType: Release
        BuildName: release
      Debug:
        BuildType: Debug
        BuildName: debug
  variables:
  - name: PKG_NAME
    value: verona-llvm-x86_64-macos-$(BuildName)-$(GOOD_HASH)
  steps:
  - checkout: llvm

  - script: |
      set -eo pipefail
      git checkout master
      git pull
      git checkout $(GOOD_HASH)
    displayName: 'Move tree to known good LLVM commit for Verona'

  - task: CMake@1
    displayName: 'CMake'
    inputs:
      cmakeArgs: |
        ../llvm -DCMAKE_BUILD_TYPE=$(BuildType) -DLLVM_ENABLE_PROJECTS=mlir -DLLVM_TARGETS_TO_BUILD="X86" -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON

  - script: |
      set -eo pipefail
      make -j 4
      VERSION=$(./bin/mlir-tblgen --version | grep -o "[0-9]\+\.[0-9]\+\.[0-9]\+" | cut -d "." -f 1,3)
      echo "##vso[task.setvariable variable=VERSION]$VERSION"
    workingDirectory: build
    displayName: 'Compile LLVM & MLIR'

  - script: |
      set -eo pipefail
      rm -rf /tmp/$PKG_NAME
      mkdir -p /tmp/$PKG_NAME
      tar zcf /tmp/$PKG_NAME/$PKG_NAME.tar.gz .
    displayName: 'Create artifact'

  - task: UniversalPackages@0
    displayName: 'Publishing Package'
    inputs:
      command: publish
      publishDirectory: /tmp/$(PKG_NAME)
      vstsFeedPublish: Project%20Verona/LLVMBuild
      vstsFeedPackagePublish: $(PKG_NAME)
      packagePublishDescription: 'Verona LLVM $(BuildType) Build for MacOS at $(GOOD_HASH)'
      versionOption: custom
      versionPublish: $(VERSION).$(Build.Buildid)

(class
  ()
  []
  ()
  [
    (class
      $module-0
      []
      ()
      [
        (class U32 [] () [])
        (class List [ (typeparam T () ()) ] () [])
        (function
          for_sum
          (signature
            []
            [
              (param
                x
                (typeref
                  [ (typename List [ (typeref [ (typename U32 []) ]) ]) ])
                ())
            ]
            (typeref [ (typename U32 []) ])
            ())
          (block
            [
              (assign
                (oftype (let sum) (typeref [ (typename U32 []) ]))
                (int 0))
              (block
                [
                  (assign (let $0) (apply (select (ref x) values) (tuple [])))
                  (while
                    (apply (select (ref $0) has_value) (tuple []))
                    (block
                      [
                        (assign (let a) (apply (ref $0) (tuple [])))
                        (assign (ref sum) (apply (select (ref sum) +) (ref a)))
                        (apply (select (ref $0) next) (tuple []))
                      ]))
                ])
              (block
                [
                  (assign (let $2) (apply (select (ref x) values) (tuple [])))
                  (while
                    (apply (select (ref $2) has_value) (tuple []))
                    (block
                      [
                        (assign (let a) (apply (ref $2) (tuple [])))
                        (assign (ref sum) (apply (select (ref sum) +) (ref a)))
                        (block
                          [
                            (assign
                              (let $1)
                              (apply (select (ref x) values) (tuple [])))
                            (while
                              (apply (select (ref $1) has_value) (tuple []))
                              (block
                                [
                                  (assign (let a) (apply (ref $1) (tuple [])))
                                  (assign
                                    (ref sum)
                                    (apply (select (ref sum) +) (ref a)))
                                  (apply (select (ref $1) next) (tuple []))
                                ]))
                          ])
                        (apply (select (ref $2) next) (tuple []))
                      ]))
                ])
              (if
                (apply (select (ref x) has_values) (tuple []))
                (block
                  [
                    (block
                      [
                        (assign
                          (let $3)
                          (apply (select (ref x) values) (tuple [])))
                        (while
                          (apply (select (ref $3) has_value) (tuple []))
                          (block
                            [
                              (assign (let a) (apply (ref $3) (tuple [])))
                              (assign
                                (ref sum)
                                (apply (select (ref sum) +) (ref a)))
                              (apply (select (ref $3) next) (tuple []))
                            ]))
                      ])
                  ])
                (block
                  [
                    (block
                      [
                        (assign
                          (let $4)
                          (apply (select (ref x) values) (tuple [])))
                        (while
                          (apply (select (ref $4) has_value) (tuple []))
                          (block
                            [
                              (assign (let a) (apply (ref $4) (tuple [])))
                              (assign
                                (ref sum)
                                (apply (select (ref sum) +) (ref a)))
                              (apply (select (ref $4) next) (tuple []))
                            ]))
                      ])
                  ]))
              (return (ref sum))
            ]))
      ])
  ])

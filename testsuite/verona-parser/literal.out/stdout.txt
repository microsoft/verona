(class
  ()
  []
  ()
  [
    (class
      $module-0
      []
      ()
      [
        (using (typeref [ (modulename $module-1 []) ]))
        (using (typeref [ (modulename $module-2 []) ]))
        (interface Foo [] () [])
        (function
          f
          []
          []
          ()
          (lambda
            []
            []
            [
              (let bool1)
              (assign (ref bool1) (bool true))
              (let bool2)
              (assign (ref bool2) (bool false))
              (let int1)
              (assign (ref int1) (int 00_42))
              (let int2)
              (assign (ref int2) (hex 0xc0_FFeE))
              (let int3)
              (assign (ref int3) (binary 0b10_10_10))
              (let float1)
              (assign (ref float1) (float 27.18e-1))
              (let precedence1)
              (assign (let $0) (int 1))
              (assign (let $1) (int 2))
              (assign (let $2) (select (ref $0) [ (typename + []) ] (ref $1)))
              (assign (let $3) (int 3))
              (assign
                (ref precedence1)
                (select (ref $2) [ (typename + []) ] (ref $3)))
              (let precedence2)
              (assign (let $4) (int 1))
              (assign (let $5) (int 2))
              (assign (let $6) (int 3))
              (assign (let $7) (select (ref $5) [ (typename + []) ] (ref $6)))
              (assign
                (ref precedence2)
                (select (ref $4) [ (typename + []) ] (ref $7)))
              (let object1)
              (assign (let $8) (lambda [] [] [ (int 0) ]))
              (assign
                (ref object1)
                (object
                  ()
                  ()
                  [ (field x (typeref [ (typename U64 []) ]) (ref $8)) ]))
              (let object2)
              (assign (let $9) (lambda [] [] [ (int 0) ]))
              (assign
                (ref object2)
                (object
                  ()
                  (typeref [ (typename Foo []) ])
                  [ (field x (typeref [ (typename U64 []) ]) (ref $9)) ]))
              (let bool3)
              (oftype (ref bool3) (typeref [ (typename Bool []) ]))
              (assign (ref bool3) (bool true))
              (let bool4)
              (oftype (ref bool4) (typeref [ (typename Bool []) ]))
              (assign (ref bool4) (bool false))
              (let int4)
              (oftype (ref int4) (typeref [ (typename U16 []) ]))
              (assign (ref int4) (int 00_420))
              (let int5)
              (oftype (ref int5) (typeref [ (typename I32 []) ]))
              (assign (ref int5) (hex 0xc0_FFeE))
              (let int6)
              (oftype (ref int6) (typeref [ (typename U8 []) ]))
              (assign (ref int6) (binary 0b100_10_10))
              (let float2)
              (oftype (ref float2) (typeref [ (typename F32 []) ]))
              (assign (ref float2) (float 207.18e-1))
            ]))
      ])
    (class
      $module-1
      []
      ()
      [
        (class
          Bool
          []
          ()
          [
            (function
              apply
              []
              [ (param self (typeref [ (typename Bool []) ]) ()) ]
              (typeref [ (typename Bool []) ])
              (lambda [] [] []))
            (function
              bool
              []
              [ (param self (typeref [ (typename Bool []) ]) ()) ]
              (typeref [ (typename Bool []) ])
              (lambda [] [] []))
          ])
        (interface
          ToBool
          []
          ()
          [
            (function
              bool
              []
              [ (param self (Self ) ()) ]
              (typeref [ (typename Bool []) ])
              ())
          ])
        (function
          and
          [
            (typeparam T (typeref [ (typename ToBool []) ]) ())
            (typeparam U () ())
          ]
          [
            (param a (typeref [ (typename T []) ]) ())
            (param
              b
              (functiontype (tupletype []) (typeref [ (typename U []) ]))
              ())
          ]
          (uniontype
            [ (typeref [ (typename T []) ]) (typeref [ (typename U []) ]) ])
          (lambda
            []
            []
            [
              (assign (let $0) (select () [ (typename bool []) ] (ref a)))
              (assign
                (let $1)
                (lambda
                  []
                  [ (param $0 () ()) ]
                  [
                    (assign (let $1) (bool false))
                    (assign
                      (let $2)
                      (select (ref $1) [ (typename == []) ] (ref $0)))
                    (select () [ (typename requires []) ] (ref $2))
                  ]))
              (assign
                (let $2)
                (lambda
                  []
                  [ (param $0 () ()) ]
                  [
                    (assign (let $1) (bool true))
                    (assign
                      (let $2)
                      (select (ref $1) [ (typename == []) ] (ref $0)))
                    (select () [ (typename requires []) ] (ref $2))
                    (select (ref b) [ (typename apply []) ] ())
                  ]))
              (match (ref $0) [ (ref $1) (ref $2) ])
            ]))
        (function
          or
          [
            (typeparam T (typeref [ (typename ToBool []) ]) ())
            (typeparam U () ())
          ]
          [
            (param a (typeref [ (typename T []) ]) ())
            (param
              b
              (functiontype (tupletype []) (typeref [ (typename U []) ]))
              ())
          ]
          (uniontype
            [ (typeref [ (typename T []) ]) (typeref [ (typename U []) ]) ])
          (lambda
            []
            []
            [
              (assign (let $0) (select () [ (typename bool []) ] (ref a)))
              (assign
                (let $1)
                (lambda
                  []
                  [ (param $0 () ()) ]
                  [
                    (assign (let $1) (bool true))
                    (assign
                      (let $2)
                      (select (ref $1) [ (typename == []) ] (ref $0)))
                    (select () [ (typename requires []) ] (ref $2))
                  ]))
              (assign
                (let $2)
                (lambda
                  []
                  [ (param $0 () ()) ]
                  [
                    (assign (let $1) (bool false))
                    (assign
                      (let $2)
                      (select (ref $1) [ (typename == []) ] (ref $0)))
                    (select () [ (typename requires []) ] (ref $2))
                    (select (ref b) [ (typename apply []) ] ())
                  ]))
              (match (ref $0) [ (ref $1) (ref $2) ])
            ]))
        (function
          not
          [ (typeparam T (typeref [ (typename ToBool []) ]) ()) ]
          [ (param a (typeref [ (typename T []) ]) ()) ]
          (typeref [ (typename Bool []) ])
          (lambda
            []
            []
            [
              (assign (let $0) (select () [ (typename bool []) ] (ref a)))
              (assign
                (let $1)
                (lambda
                  []
                  [ (param $0 () ()) ]
                  [
                    (assign (let $1) (bool true))
                    (assign
                      (let $2)
                      (select (ref $1) [ (typename == []) ] (ref $0)))
                    (select () [ (typename requires []) ] (ref $2))
                    (bool false)
                  ]))
              (assign
                (let $2)
                (lambda
                  []
                  [ (param $0 () ()) ]
                  [
                    (assign (let $1) (bool false))
                    (assign
                      (let $2)
                      (select (ref $1) [ (typename == []) ] (ref $0)))
                    (select () [ (typename requires []) ] (ref $2))
                    (bool true)
                  ]))
              (match (ref $0) [ (ref $1) (ref $2) ])
            ]))
        (class Less [] () [])
        (class Equal [] () [])
        (class Greater [] () [])
        (typealias
          Compare
          []
          (uniontype
            [
              (typeref [ (typename Less []) ])
              (typeref [ (typename Equal []) ])
              (typeref [ (typename Greater []) ])
            ]))
        (interface
          Equatable
          [ (typeparam T () ()) ]
          ()
          [
            (function
              ==
              []
              [
                (param self (Self ) ())
                (param other (typeref [ (typename T []) ]) ())
              ]
              (typeref [ (typename Bool []) ])
              ())
            (function
              !=
              []
              [
                (param self (Self ) ())
                (param other (typeref [ (typename T []) ]) ())
              ]
              (typeref [ (typename Bool []) ])
              (lambda
                []
                []
                [
                  (assign
                    (let $0)
                    (select (ref self) [ (typename == []) ] (ref other)))
                  (select () [ (typename not []) ] (ref $0))
                ]))
          ])
        (interface
          Comparable
          [ (typeparam T () ()) ]
          (typeref [ (typename Equatable [ (typeref [ (typename T []) ]) ]) ])
          [
            (function
              <
              []
              [
                (param self (Self ) ())
                (param other (typeref [ (typename T []) ]) ())
              ]
              (typeref [ (typename Bool []) ])
              ())
            (function
              <=
              []
              [
                (param self (Self ) ())
                (param other (typeref [ (typename T []) ]) ())
              ]
              (typeref [ (typename Bool []) ])
              (lambda
                []
                []
                [
                  (assign
                    (let $0)
                    (select (ref self) [ (typename < []) ] (ref other)))
                  (assign
                    (let $1)
                    (select (ref self) [ (typename == []) ] (ref other)))
                  (select (ref $0) [ (typename or []) ] (ref $1))
                ]))
            (function
              >=
              []
              [
                (param self (Self ) ())
                (param other (typeref [ (typename T []) ]) ())
              ]
              (typeref [ (typename Bool []) ])
              (lambda
                []
                []
                [
                  (assign
                    (let $0)
                    (select (ref self) [ (typename < []) ] (ref other)))
                  (select () [ (typename not []) ] (ref $0))
                ]))
            (function
              >
              []
              [
                (param self (Self ) ())
                (param other (typeref [ (typename T []) ]) ())
              ]
              (typeref [ (typename Bool []) ])
              (lambda
                []
                []
                [
                  (assign
                    (let $0)
                    (select (ref self) [ (typename <= []) ] (ref other)))
                  (select () [ (typename not []) ] (ref $0))
                ]))
            (function
              <=>
              []
              [
                (param self (Self ) ())
                (param other (typeref [ (typename T []) ]) ())
              ]
              (typeref [ (typename Compare []) ])
              (lambda
                []
                []
                [
                  (assign
                    (let $0)
                    (select (ref self) [ (typename < []) ] (ref other)))
                  (assign (let $1) (select () [ (typename if []) ] (ref $0)))
                  (assign
                    (let $2)
                    (lambda
                      []
                      []
                      [
                        (select
                          ()
                          [ (typename Less []) (typename create []) ]
                          ())
                      ]))
                  (assign
                    (let $3)
                    (select (ref $1) [ (typename apply []) ] (ref $2)))
                  (assign
                    (let $4)
                    (select (ref self) [ (typename == []) ] (ref other)))
                  (assign
                    (let $5)
                    (select (ref $3) [ (typename elseif []) ] (ref $4)))
                  (assign
                    (let $6)
                    (lambda
                      []
                      []
                      [
                        (select
                          ()
                          [ (typename Equal []) (typename create []) ]
                          ())
                      ]))
                  (assign
                    (let $7)
                    (select (ref $5) [ (typename apply []) ] (ref $6)))
                  (assign
                    (let $8)
                    (lambda
                      []
                      []
                      [
                        (select
                          ()
                          [ (typename Greater []) (typename create []) ]
                          ())
                      ]))
                  (select (ref $7) [ (typename else []) ] (ref $8))
                ]))
          ])
      ])
    (class
      $module-2
      []
      ()
      [
        (class I8 [] () [])
        (class I16 [] () [])
        (class I32 [] () [])
        (class I64 [] () [])
        (class I128 [] () [])
        (class ISize [] () [])
        (class U8 [] () [])
        (class U16 [] () [])
        (class U32 [] () [])
        (class U64 [] () [])
        (class U128 [] () [])
        (class USize [] () [])
        (class F32 [] () [])
        (class F64 [] () [])
      ])
  ])

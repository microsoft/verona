(class
  ()
  []
  ()
  [
    (class
      $module-0
      []
      ()
      [
        (class Cown [ (typeparam T () ()) ] () [])
        (class A [] () [])
        (class B [] () [])
        (function bar [] [] () (lambda [] [] []))
        (function
          foo
          []
          [
            (param
              a
              (typeref [ (typename Cown [ (typeref [ (typename A []) ]) ]) ])
              ())
            (param
              b
              (typeref [ (typename Cown [ (typeref [ (typename B []) ]) ]) ])
              ())
          ]
          ()
          (lambda
            []
            []
            [
              (assign (let $0) (lambda [] [] []))
              (assign (let $1) (when (ref a) (ref $0)))
              (assign (let $2) (tuple [ (ref a) (ref b) ]))
              (assign
                (let $3)
                (lambda
                  []
                  []
                  [
                    (assign (let $0) (select () [ (typename bar []) ] ()))
                    (assign (let $1) (lambda [] [] []))
                    (assign (let $2) (when (ref $0) (ref $1)))
                    (select (ref $2) [ (typename return []) ] (ref b))
                  ]))
              (assign (let $4) (when (ref $2) (ref $3)))
              (select (ref $1) [ (typename apply []) ] (ref $4))
            ]))
      ])
  ])

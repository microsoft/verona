(class
  ()
  []
  ()
  [
    (class
      $module-0
      []
      ()
      [
        (using (typeref [ (modulename $module-1 []) ]))
        (function
          foo
          [ (typeparam T () ()) ]
          [ (param a (typeref [ (typename T []) ]) ()) ]
          ()
          (lambda [] [] []))
        (function
          f
          [ (typeparam T () ()) ]
          [ (param x (typeref [ (typename T []) ]) ()) ]
          ()
          (lambda
            []
            []
            [
              (let a)
              (assign (ref a) (int 0))
              (assign
                (let $0)
                (lambda
                  []
                  []
                  [
                    (assign (let $0) (int 5))
                    (select (ref a) [ (typename < []) ] (ref $0))
                  ]))
              (assign (let $1) (select () [ (typename while []) ] (ref $0)))
              (assign
                (let $2)
                (lambda
                  []
                  []
                  [
                    (assign (let $0) (int 1))
                    (assign
                      (ref a)
                      (select (ref a) [ (typename + []) ] (ref $0)))
                    (assign (let $1) (int 2))
                    (assign
                      (let $2)
                      (select (ref a) [ (typename < []) ] (ref $1)))
                    (assign
                      (let $3)
                      (select
                        ()
                        [ (typename if []) (typename create []) ]
                        (ref $2)))
                    (assign
                      (let $4)
                      (lambda
                        []
                        []
                        [
                          (select
                            ()
                            [ (typename continue []) (typename create []) ]
                            ())
                        ]))
                    (assign
                      (let $5)
                      (select (ref $3) [ (typename apply []) ] (ref $4)))
                    (assign
                      (let $6)
                      (lambda
                        []
                        []
                        [
                          (select
                            ()
                            [ (typename break []) (typename create []) ]
                            ())
                        ]))
                    (select (ref $5) [ (typename else []) ] (ref $6))
                  ]))
              (assign
                (let $3)
                (select (ref $1) [ (typename apply []) ] (ref $2)))
              (assign (let $4) (select (ref $3) [ (typename for []) ] (ref x)))
              (assign
                (let $5)
                (lambda
                  []
                  [ (param a () ()) ]
                  [ (select () [ (typename foo []) ] (ref a)) ]))
              (assign
                (let $6)
                (select (ref $4) [ (typename apply []) ] (ref $5)))
              (select
                (ref $6)
                [ (typename return []) (typename create []) ]
                (ref a))
            ]))
      ])
    (class
      $module-1
      []
      ()
      [
        (function
          ~
          [
            (typeparam T () ())
            (typeparamlist U () ())
            (typeparam V () ())
            (typeparam
              R
              (functiontype (typelist U) (typeref [ (typename V []) ]))
              ())
          ]
          [
            (param
              f
              (viewtype
                (typeref [ (typename R []) ])
                (functiontype
                  (tupletype [ (typeref [ (typename T []) ]) (typelist U) ])
                  (typeref [ (typename V []) ])))
              ())
            (param
              x
              (viewtype
                (typeref [ (typename R []) ])
                (typeref [ (typename T []) ]))
              ())
          ]
          (typeref [ (typename R []) ])
          (lambda
            []
            []
            [
              (lambda
                []
                [ (param y (typelist U) ()) ]
                [
                  (assign (let $0) (tuple [ (ref x) (ref y) ]))
                  (select (ref f) [ (typename apply []) ] (ref $0))
                ])
            ]))
        (function
          |>
          [ (typeparamlist T () ()) (typeparam U () ()) ]
          [
            (param x (typelist T) ())
            (param
              y
              (functiontype (typelist T) (typeref [ (typename U []) ]))
              ())
          ]
          (typeref [ (typename U []) ])
          (lambda [] [] [ (select (ref y) [ (typename apply []) ] (ref x)) ]))
        (class FalseBranch [] () [])
        (class
          if
          []
          ()
          [
            (function
              apply
              [ (typeparam T () ()) ]
              [
                (param
                  cond
                  (functiontype (tupletype []) (typeref [ (typename Bool []) ]))
                  ())
              ]
              (functiontype
                (functiontype (tupletype []) (typeref [ (typename T []) ]))
                (uniontype
                  [
                    (typeref
                      [ (typename Done [ (typeref [ (typename T []) ]) ]) ])
                    (typeref [ (typename FalseBranch []) ])
                  ]))
              (lambda
                []
                []
                [
                  (lambda
                    []
                    [ (param ontrue () ()) ]
                    [
                      (assign
                        (let $0)
                        (select (ref cond) [ (typename apply []) ] ()))
                      (assign
                        (let $1)
                        (lambda
                          []
                          [ (param $0 () ()) ]
                          [
                            (assign (let $1) (bool true))
                            (assign
                              (let $2)
                              (select (ref $1) [ (typename == []) ] (ref $0)))
                            (select () [ (typename requires []) ] (ref $2))
                            (assign
                              (let $3)
                              (select (ref ontrue) [ (typename apply []) ] ()))
                            (select
                              ()
                              [ (typename Done []) (typename create []) ]
                              (ref $3))
                          ]))
                      (assign
                        (let $2)
                        (lambda
                          []
                          [ (param $0 () ()) ]
                          [
                            (assign (let $1) (bool false))
                            (assign
                              (let $2)
                              (select (ref $1) [ (typename == []) ] (ref $0)))
                            (select () [ (typename requires []) ] (ref $2))
                            (select
                              ()
                              [ (typename FalseBranch []) (typename create []) ]
                              ())
                          ]))
                      (match (ref $0) [ (ref $1) (ref $2) ])
                    ])
                ]))
          ])
        (function
          elseif
          [ (typeparam T () ()) (typeparam U () ()) ]
          [
            (param
              prev
              (uniontype
                [
                  (typeref
                    [ (typename Done [ (typeref [ (typename T []) ]) ]) ])
                  (typeref [ (typename FalseBranch []) ])
                ])
              ())
            (param
              cond
              (functiontype (tupletype []) (typeref [ (typename Bool []) ]))
              ())
          ]
          (functiontype
            (functiontype (tupletype []) (typeref [ (typename U []) ]))
            (uniontype
              [
                (typeref [ (typename Done [ (typeref [ (typename T []) ]) ]) ])
                (typeref [ (typename Done [ (typeref [ (typename U []) ]) ]) ])
              ]))
          (lambda
            []
            []
            [
              (lambda
                []
                [ (param ontrue () ()) ]
                [
                  (assign
                    (let $0)
                    (lambda
                      []
                      []
                      [
                        (assign
                          (let $0)
                          (select
                            ()
                            [ (typename if []) (typename create []) ]
                            (ref cond)))
                        (select (ref $0) [ (typename apply []) ] (ref ontrue))
                      ]))
                  (select (ref prev) [ (typename else []) ] (ref $0))
                ])
            ]))
        (function
          else
          [ (typeparam T () ()) (typeparam U () ()) ]
          [
            (param
              prev
              (uniontype
                [
                  (typeref
                    [ (typename Done [ (typeref [ (typename T []) ]) ]) ])
                  (typeref [ (typename FalseBranch []) ])
                ])
              ())
            (param
              onfalse
              (functiontype (tupletype []) (typeref [ (typename U []) ]))
              ())
          ]
          (uniontype
            [
              (typeref [ (typename Done [ (typeref [ (typename T []) ]) ]) ])
              (typeref [ (typename Done [ (typeref [ (typename U []) ]) ]) ])
            ])
          (lambda
            []
            []
            [
              (assign
                (let $0)
                (lambda
                  []
                  [ (param $0 () ()) ]
                  [
                    (assign
                      (let $1)
                      (select
                        ()
                        [ (typename FalseBranch []) (typename create []) ]
                        ()))
                    (assign
                      (let $2)
                      (select (ref $1) [ (typename == []) ] (ref $0)))
                    (select () [ (typename requires []) ] (ref $2))
                    (assign
                      (let $3)
                      (select (ref onfalse) [ (typename apply []) ] ()))
                    (select
                      ()
                      [ (typename Done []) (typename create []) ]
                      (ref $3))
                  ]))
              (assign
                (let $1)
                (lambda
                  []
                  [
                    (param
                      v
                      (typeref
                        [ (typename Done [ (typeref [ (typename T []) ]) ]) ])
                      ())
                  ]
                  []))
              (match (ref prev) [ (ref $0) (ref $1) ])
            ]))
        (using (typeref [ (modulename $module-2 []) ]))
        (interface Any [] () [])
        (class None [] () [])
        (class NoCatch [] () [])
        (class
          Done
          [ (typeparam T () ()) ]
          ()
          [
            (field result (typeref [ (typename T []) ]) ())
            (function
              create
              [
                (typeparam
                  R
                  (typeref
                    [ (typename Done [ (typeref [ (typename T []) ]) ]) ])
                  ())
              ]
              [
                (param
                  from
                  (viewtype
                    (typeref [ (typename R []) ])
                    (typeref [ (typename T []) ]))
                  (lambda
                    []
                    []
                    [
                      (select () [ (typename None []) (typename create []) ] ())
                    ]))
              ]
              (typeref [ (typename R []) ])
              (lambda [] [] [ (new () (ref from)) ]))
            (function
              apply
              [ (typeparam U () ()) ]
              [ (param x (typeref [ (typename U []) ]) ()) ]
              (typeref [ (typename U []) ])
              (lambda [] [] []))
          ])
        (class NoLabel [] () [])
        (class Break [ (typeparam L () ()) ] () [])
        (class Continue [ (typeparam L () ()) ] () [])
        (class
          break
          [ (typeparam L () (typeref [ (typename NoLabel []) ])) ]
          ()
          [
            (function
              create
              []
              []
              (throwtype
                (typeref [ (typename Break [ (typeref [ (typename L []) ]) ]) ]))
              (lambda
                []
                []
                [
                  (assign
                    (let $0)
                    (select
                      ()
                      [
                        (typename Break [ (typeref [ (typename L []) ]) ])
                        (typename create [])
                      ]
                      ()))
                  (throw (ref $0))
                ]))
          ])
        (class
          continue
          [ (typeparam L () (typeref [ (typename NoLabel []) ])) ]
          ()
          [
            (function
              create
              []
              []
              (throwtype
                (typeref
                  [ (typename Continue [ (typeref [ (typename L []) ]) ]) ]))
              (lambda
                []
                []
                [
                  (assign
                    (let $0)
                    (select
                      ()
                      [
                        (typename Continue [ (typeref [ (typename L []) ]) ])
                        (typename create [])
                      ]
                      ()))
                  (throw (ref $0))
                ]))
          ])
        (function
          while
          [
            (typeparam L () (typeref [ (typename NoLabel []) ]))
            (typeparam T () ())
            (typeparam U () ())
          ]
          [
            (param
              cond
              (functiontype (tupletype []) (typeref [ (typename Bool []) ]))
              ())
            (param
              body
              (functiontype
                (tupletype [])
                (uniontype
                  [
                    (typeref [ (typename T []) ])
                    (throwtype (typeref [ (typename U []) ]))
                  ]))
              ())
          ]
          (uniontype
            [
              (typeref [ (typename Done [ (typeref [ (typename None []) ]) ]) ])
              (throwtype (typeref [ (typename U []) ]))
            ])
          (lambda
            []
            []
            [
              (assign (let $0) (select (ref cond) [ (typename apply []) ] ()))
              (assign
                (let $1)
                (lambda
                  []
                  [ (param $0 () ()) ]
                  [
                    (assign (let $1) (bool true))
                    (assign
                      (let $2)
                      (select (ref $1) [ (typename == []) ] (ref $0)))
                    (select () [ (typename requires []) ] (ref $2))
                    (assign
                      (let $3)
                      (lambda
                        []
                        []
                        [
                          (select (ref body) [ (typename apply []) ] ())
                          (select
                            ()
                            [ (typename continue []) (typename create []) ]
                            ())
                        ]))
                    (assign
                      (let $4)
                      (lambda
                        []
                        [ (param $0 () ()) ]
                        [
                          (assign
                            (let $1)
                            (select
                              ()
                              [
                                (typename
                                  Break
                                  [ (typeref [ (typename NoLabel []) ]) ])
                                (typename create [])
                              ]
                              ()))
                          (assign
                            (let $2)
                            (select
                              ()
                              [
                                (typename
                                  Break
                                  [ (typeref [ (typename L []) ]) ])
                                (typename create [])
                              ]
                              ()))
                          (assign
                            (let $3)
                            (select (ref $1) [ (typename | []) ] (ref $2)))
                          (assign
                            (let $4)
                            (select (ref $3) [ (typename == []) ] (ref $0)))
                          (select () [ (typename requires []) ] (ref $4))
                          (select
                            ()
                            [ (typename Done []) (typename create []) ]
                            ())
                        ]))
                    (assign
                      (let $5)
                      (lambda
                        []
                        [ (param $0 () ()) ]
                        [
                          (assign
                            (let $1)
                            (select
                              ()
                              [
                                (typename
                                  Continue
                                  [ (typeref [ (typename NoLabel []) ]) ])
                                (typename create [])
                              ]
                              ()))
                          (assign
                            (let $2)
                            (select
                              ()
                              [
                                (typename
                                  Continue
                                  [ (typeref [ (typename L []) ]) ])
                                (typename create [])
                              ]
                              ()))
                          (assign
                            (let $3)
                            (select (ref $1) [ (typename | []) ] (ref $2)))
                          (assign
                            (let $4)
                            (select (ref $3) [ (typename == []) ] (ref $0)))
                          (select () [ (typename requires []) ] (ref $4))
                          (assign
                            (let $5)
                            (select
                              ()
                              [
                                (typename
                                  while
                                  [ (typeref [ (typename L []) ]) ])
                              ]
                              (ref cond)))
                          (select (ref $5) [ (typename apply []) ] (ref body))
                        ]))
                    (try (ref $3) [ (ref $4) (ref $5) ])
                  ]))
              (assign (let $2) (lambda [] [] []))
              (match (ref $0) [ (ref $1) (ref $2) ])
            ]))
        (class NoMatch [] () [])
        (function
          as
          [ (typeparam T () ()) (typeparam U () ()) ]
          [ (param value (typeref [ (typename U []) ]) ()) ]
          (uniontype
            [
              (typeref [ (typename T []) ])
              (throwtype (typeref [ (typename NoMatch []) ]))
            ])
          (lambda
            []
            []
            [
              (assign
                (let $0)
                (lambda [] [ (param x (typeref [ (typename T []) ]) ()) ] []))
              (assign
                (let $1)
                (lambda
                  []
                  []
                  [
                    (assign
                      (let $0)
                      (select
                        ()
                        [ (typename NoMatch []) (typename create []) ]
                        ()))
                    (throw (ref $0))
                  ]))
              (match (ref value) [ (ref $0) (ref $1) ])
            ]))
        (function
          requires
          []
          [ (param pred (typeref [ (typename Bool []) ]) ()) ]
          (uniontype
            [
              (typeref [ (typename None []) ])
              (throwtype (typeref [ (typename NoMatch []) ]))
            ])
          (lambda
            []
            []
            [
              (assign (let $0) (select () [ (typename not []) ] (ref pred)))
              (assign
                (let $1)
                (select () [ (typename if []) (typename create []) ] (ref $0)))
              (assign
                (let $2)
                (lambda
                  []
                  []
                  [
                    (assign
                      (let $0)
                      (select
                        ()
                        [ (typename NoMatch []) (typename create []) ]
                        ()))
                    (throw (ref $0))
                  ]))
              (select (ref $1) [ (typename apply []) ] (ref $2))
            ]))
        (class
          OrEquals
          [ (typeparam T1 () ()) (typeparam T2 () ()) ]
          ()
          [
            (field
              a
              (typeref
                [ (typename Equatable [ (typeref [ (typename T1 []) ]) ]) ])
              ())
            (field
              b
              (typeref
                [ (typename Equatable [ (typeref [ (typename T2 []) ]) ]) ])
              ())
            (function
              ==
              []
              [
                (param
                  self
                  (typeref
                    [
                      (typename
                        OrEquals
                        [
                          (typeref [ (typename T1 []) ])
                          (typeref [ (typename T2 []) ])
                        ])
                    ])
                  ())
                (param
                  x
                  (uniontype
                    [
                      (typeref [ (typename T1 []) ])
                      (typeref [ (typename T2 []) ])
                    ])
                  ())
              ]
              (typeref [ (typename Bool []) ])
              (lambda
                []
                []
                [
                  (assign
                    (let $0)
                    (lambda
                      []
                      [ (param y (typeref [ (typename T1 []) ]) ()) ]
                      [
                        (assign
                          (let $0)
                          (select (ref self) [ (typename a []) ] ()))
                        (select (ref $0) [ (typename == []) ] (ref y))
                      ]))
                  (assign
                    (let $1)
                    (lambda
                      []
                      [ (param y (typeref [ (typename T2 []) ]) ()) ]
                      [
                        (assign
                          (let $0)
                          (select (ref self) [ (typename b []) ] ()))
                        (select (ref $0) [ (typename == []) ] (ref y))
                      ]))
                  (assign (let $2) (lambda [] [] [ (bool false) ]))
                  (match (ref x) [ (ref $0) (ref $1) (ref $2) ])
                ]))
          ])
        (function
          |
          [ (typeparam T1 () ()) (typeparam T2 () ()) ]
          [
            (param
              e1
              (typeref
                [ (typename Equatable [ (typeref [ (typename T1 []) ]) ]) ])
              ())
            (param
              e2
              (typeref
                [ (typename Equatable [ (typeref [ (typename T2 []) ]) ]) ])
              ())
          ]
          (typeref
            [
              (typename
                OrEquals
                [
                  (typeref [ (typename T1 []) ])
                  (typeref [ (typename T2 []) ])
                ])
            ])
          (lambda
            []
            []
            [
              (assign (let $0) (tuple [ (ref e1) (ref e2) ]))
              (select
                ()
                [ (typename OrEquals []) (typename create []) ]
                (ref $0))
            ]))
        (class
          Return
          [ (typeparam T () ()) ]
          ()
          [ (field value (typeref [ (typename T []) ]) ()) ])
        (class
          return
          [ (typeparam T () (typeref [ (typename None []) ])) ]
          ()
          [
            (function
              create
              []
              [
                (param
                  x
                  (typeref [ (typename T []) ])
                  (lambda
                    []
                    []
                    [
                      (select () [ (typename None []) (typename create []) ] ())
                    ]))
              ]
              (throwtype
                (typeref
                  [ (typename Return [ (typeref [ (typename T []) ]) ]) ]))
              (lambda
                []
                []
                [
                  (assign
                    (let $0)
                    (select
                      ()
                      [
                        (typename Return [ (typeref [ (typename T []) ]) ])
                        (typename create [])
                      ]
                      (ref x)))
                  (throw (ref $0))
                ]))
          ])
      ])
    (class
      $module-2
      []
      ()
      [
        (class
          Bool
          []
          ()
          [
            (function
              apply
              []
              [ (param self (typeref [ (typename Bool []) ]) ()) ]
              (typeref [ (typename Bool []) ])
              (lambda [] [] []))
            (function
              bool
              []
              [ (param self (typeref [ (typename Bool []) ]) ()) ]
              (typeref [ (typename Bool []) ])
              (lambda [] [] []))
          ])
        (interface
          ToBool
          []
          ()
          [
            (function
              bool
              []
              [ (param self (Self ) ()) ]
              (typeref [ (typename Bool []) ])
              ())
          ])
        (function
          and
          [
            (typeparam T (typeref [ (typename ToBool []) ]) ())
            (typeparam U () ())
          ]
          [
            (param a (typeref [ (typename T []) ]) ())
            (param
              b
              (functiontype (tupletype []) (typeref [ (typename U []) ]))
              ())
          ]
          (uniontype
            [ (typeref [ (typename T []) ]) (typeref [ (typename U []) ]) ])
          (lambda
            []
            []
            [
              (assign (let $0) (select () [ (typename bool []) ] (ref a)))
              (assign
                (let $1)
                (lambda
                  []
                  [ (param $0 () ()) ]
                  [
                    (assign (let $1) (bool false))
                    (assign
                      (let $2)
                      (select (ref $1) [ (typename == []) ] (ref $0)))
                    (select () [ (typename requires []) ] (ref $2))
                  ]))
              (assign
                (let $2)
                (lambda
                  []
                  [ (param $0 () ()) ]
                  [
                    (assign (let $1) (bool true))
                    (assign
                      (let $2)
                      (select (ref $1) [ (typename == []) ] (ref $0)))
                    (select () [ (typename requires []) ] (ref $2))
                    (select (ref b) [ (typename apply []) ] ())
                  ]))
              (match (ref $0) [ (ref $1) (ref $2) ])
            ]))
        (function
          or
          [
            (typeparam T (typeref [ (typename ToBool []) ]) ())
            (typeparam U () ())
          ]
          [
            (param a (typeref [ (typename T []) ]) ())
            (param
              b
              (functiontype (tupletype []) (typeref [ (typename U []) ]))
              ())
          ]
          (uniontype
            [ (typeref [ (typename T []) ]) (typeref [ (typename U []) ]) ])
          (lambda
            []
            []
            [
              (assign (let $0) (select () [ (typename bool []) ] (ref a)))
              (assign
                (let $1)
                (lambda
                  []
                  [ (param $0 () ()) ]
                  [
                    (assign (let $1) (bool true))
                    (assign
                      (let $2)
                      (select (ref $1) [ (typename == []) ] (ref $0)))
                    (select () [ (typename requires []) ] (ref $2))
                  ]))
              (assign
                (let $2)
                (lambda
                  []
                  [ (param $0 () ()) ]
                  [
                    (assign (let $1) (bool false))
                    (assign
                      (let $2)
                      (select (ref $1) [ (typename == []) ] (ref $0)))
                    (select () [ (typename requires []) ] (ref $2))
                    (select (ref b) [ (typename apply []) ] ())
                  ]))
              (match (ref $0) [ (ref $1) (ref $2) ])
            ]))
        (function
          not
          [ (typeparam T (typeref [ (typename ToBool []) ]) ()) ]
          [ (param a (typeref [ (typename T []) ]) ()) ]
          (typeref [ (typename Bool []) ])
          (lambda
            []
            []
            [
              (assign (let $0) (select () [ (typename bool []) ] (ref a)))
              (assign
                (let $1)
                (lambda
                  []
                  [ (param $0 () ()) ]
                  [
                    (assign (let $1) (bool true))
                    (assign
                      (let $2)
                      (select (ref $1) [ (typename == []) ] (ref $0)))
                    (select () [ (typename requires []) ] (ref $2))
                    (bool false)
                  ]))
              (assign
                (let $2)
                (lambda
                  []
                  [ (param $0 () ()) ]
                  [
                    (assign (let $1) (bool false))
                    (assign
                      (let $2)
                      (select (ref $1) [ (typename == []) ] (ref $0)))
                    (select () [ (typename requires []) ] (ref $2))
                    (bool true)
                  ]))
              (match (ref $0) [ (ref $1) (ref $2) ])
            ]))
        (class Less [] () [])
        (class Equal [] () [])
        (class Greater [] () [])
        (typealias
          Compare
          []
          (uniontype
            [
              (typeref [ (typename Less []) ])
              (typeref [ (typename Equal []) ])
              (typeref [ (typename Greater []) ])
            ]))
        (interface
          Equatable
          [ (typeparam T () ()) ]
          ()
          [
            (function
              ==
              []
              [
                (param self (Self ) ())
                (param other (typeref [ (typename T []) ]) ())
              ]
              (typeref [ (typename Bool []) ])
              ())
            (function
              !=
              []
              [
                (param self (Self ) ())
                (param other (typeref [ (typename T []) ]) ())
              ]
              (typeref [ (typename Bool []) ])
              (lambda
                []
                []
                [
                  (assign
                    (let $0)
                    (select (ref self) [ (typename == []) ] (ref other)))
                  (select () [ (typename not []) ] (ref $0))
                ]))
          ])
        (interface
          Comparable
          [ (typeparam T () ()) ]
          (typeref [ (typename Equatable [ (typeref [ (typename T []) ]) ]) ])
          [
            (function
              <
              []
              [
                (param self (Self ) ())
                (param other (typeref [ (typename T []) ]) ())
              ]
              (typeref [ (typename Bool []) ])
              ())
            (function
              <=
              []
              [
                (param self (Self ) ())
                (param other (typeref [ (typename T []) ]) ())
              ]
              (typeref [ (typename Bool []) ])
              (lambda
                []
                []
                [
                  (assign
                    (let $0)
                    (select (ref self) [ (typename < []) ] (ref other)))
                  (assign
                    (let $1)
                    (select (ref self) [ (typename == []) ] (ref other)))
                  (select (ref $0) [ (typename or []) ] (ref $1))
                ]))
            (function
              >=
              []
              [
                (param self (Self ) ())
                (param other (typeref [ (typename T []) ]) ())
              ]
              (typeref [ (typename Bool []) ])
              (lambda
                []
                []
                [
                  (assign
                    (let $0)
                    (select (ref self) [ (typename < []) ] (ref other)))
                  (select () [ (typename not []) ] (ref $0))
                ]))
            (function
              >
              []
              [
                (param self (Self ) ())
                (param other (typeref [ (typename T []) ]) ())
              ]
              (typeref [ (typename Bool []) ])
              (lambda
                []
                []
                [
                  (assign
                    (let $0)
                    (select (ref self) [ (typename <= []) ] (ref other)))
                  (select () [ (typename not []) ] (ref $0))
                ]))
            (function
              <=>
              []
              [
                (param self (Self ) ())
                (param other (typeref [ (typename T []) ]) ())
              ]
              (typeref [ (typename Compare []) ])
              (lambda
                []
                []
                [
                  (assign
                    (let $0)
                    (select (ref self) [ (typename < []) ] (ref other)))
                  (assign (let $1) (select () [ (typename if []) ] (ref $0)))
                  (assign
                    (let $2)
                    (lambda
                      []
                      []
                      [
                        (select
                          ()
                          [ (typename Less []) (typename create []) ]
                          ())
                      ]))
                  (assign
                    (let $3)
                    (select (ref $1) [ (typename apply []) ] (ref $2)))
                  (assign
                    (let $4)
                    (select (ref self) [ (typename == []) ] (ref other)))
                  (assign
                    (let $5)
                    (select (ref $3) [ (typename elseif []) ] (ref $4)))
                  (assign
                    (let $6)
                    (lambda
                      []
                      []
                      [
                        (select
                          ()
                          [ (typename Equal []) (typename create []) ]
                          ())
                      ]))
                  (assign
                    (let $7)
                    (select (ref $5) [ (typename apply []) ] (ref $6)))
                  (assign
                    (let $8)
                    (lambda
                      []
                      []
                      [
                        (select
                          ()
                          [ (typename Greater []) (typename create []) ]
                          ())
                      ]))
                  (select (ref $7) [ (typename else []) ] (ref $8))
                ]))
          ])
      ])
  ])

(class
  ()
  []
  ()
  [
    (class
      $module-0
      []
      ()
      [
        (class A [] () [])
        (class
          B
          []
          ()
          [
            (class C [] () [ (function bar [] [] () (lambda [] [] [])) ])
            (function foo [] [] () (lambda [] [] []))
          ])
        (function
          f
          [ (typeparam X () ()) ]
          [
            (param x (typeref [ (typename A []) ]) ())
            (param y (typeref [ (typename A []) ]) ())
          ]
          ()
          (lambda
            []
            []
            [
              (select () [ (typename B []) (typename create []) ] ())
              (select () [ (typename B []) (typename foo []) ] ())
              (select () [ (typename B []) (typename foo []) ] ())
              (select
                ()
                [ (typename B []) (typename C []) (typename create []) ]
                ())
              (select
                ()
                [
                  (typename B [ (typeref [ (typename X []) ]) ])
                  (typename C [])
                  (typename create [])
                ]
                ())
              (select
                ()
                [
                  (typename B [ (typeref [ (typename X []) ]) ])
                  (typename C [ (typeref [ (typename X []) ]) ])
                  (typename create [])
                ]
                ())
              (assign (let $0) (tuple [ (ref x) (ref y) ]))
              (assign (let $1) (tuple [ (ref x) (ref y) (ref $0) ]))
              (select
                ()
                [
                  (typename B [ (typeref [ (typename X []) ]) ])
                  (typename C [ (typeref [ (typename X []) ]) ])
                  (typename bar [ (typeref [ (typename X []) ]) ])
                ]
                (ref $1))
            ]))
      ])
  ])

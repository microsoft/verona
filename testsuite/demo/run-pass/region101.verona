// Copyright Microsoft and Project Verona Contributors.
// SPDX-License-Identifier: MIT

/************************************************************************
 *  This file illustrates some of the region design.
 * 
 * Currently only uses traced regions as other forms of region have not been
 * exposed in the language.
 * 
 * Primary aim of the example is to illustrate prompt collection of whole
 * regions, and independent tracing of objects within a region.
 ************************************************************************/

class Node
{
  id: U64;
  field: (Node & mut) | (None & imm);

  // Self should really be read-only, but not implemented yet.
  // This is called when the runtime deallocates this object.
  final(self: mut)
  {
    Builtin.print1("Deallocating id {}\n", self.id);
  }
}

class IsoNode
{
  id: U64;
  next: (IsoNode & iso) | (None & imm);

  // Self should really be read-only, but not implemented yet.
  // This is called when the runtime deallocates this object.
  final(self: mut)
  {
    Builtin.print1("Deallocating id {}\n", self.id);
  }
}

class Main
{
  test1()
  {
    Builtin.print("Test 1\n");

    // Note, `in` is used in allocation to specify a region,
    // without `in` a new region is assumed.

    // Allocate a new node in its own region.
    var r1 = new Node;
    // Allocate two nodes in the same region as r1.
    var r2 = new Node in r1;
    var r3 = new Node in r1;

    // Give nodes an id for logging 
    r1.id = 1;
    r2.id = 2;
    r3.id = 3;

    // Create a little graph that has a cycle
    r1.field = r2;
    r2.field = r3;
    r3.field = mut-view(r1);

    var other = new Node;
    other.id = 10;
    // The following line should be ruled out by the type checker, but that type
    // of check is not currently implemented. TODO 
    // r3.field = mut-view(other);

    // This deallocates the original value of r1, so r2 and r3 cannot be used
    // from this point on 
    r1 = new Node;
    r1.id = 4;
    Builtin.print("Update\n");

    // The following line will trigger a type error as you cannot use r2 at this
    // point:
    // Builtin.print1("r2.id = {}\n", r2.id);
    Builtin.print("Test 1 - complete\n");
    // CHECK-L: Deallocating id 1
    // CHECK-L: Update
    // CHECK-L: Deallocating id 4
  }

  test2()
  {
    Builtin.print("\n\nTest 2\n");
    //Build a region with an unreachable object.
    var r1 = new Node;
    var r2 = new Node in r1;
    r1.id = 1;
    r2.id = 2;

    //Build a second region with an unreachable object.
    var r3 = new Node;
    var r4 = new Node in r3;
    r3.id = 3;
    r4.id = 4;


    Builtin.print("Test 2 - Trace Started\n");
    //  Implementation work required to improve trace signature.
    Builtin.trace(mut-view(r1));
    // Note this does not collect the unreachable object r4, as it is only
    // tracing the region assocoiated with r1.
    Builtin.print("Test 2 - Trace finished\n");

    // TODO: should be illegal to access r2 at this point, but implementation
    // cannot express relevant signature for trace.
    // Builtin.print("Illegal: {}\n", r2.id);

    Builtin.print("Test 2 - complete\n");
    // CHECK-L: Deallocating id 2
    // CHECK-L: Test 2 - Trace finished
    // CHECK-L: Deallocating id 4

  }

  test3()
  {
    Builtin.print("\n\nTest 3\n");

    var i1 = new IsoNode;
    var i2 = new IsoNode;
    var i3 = new IsoNode;
    i1.id = 1;
    i2.id = 2;
    i3.id = 3;

    // Create a simple three element linked list
    i3.next = None.create();
    i2.next = i3;
    i1.next = i2;

    // Swing a pointer
    Builtin.print("Swing pointer\n");
    var t = i1.next;
    match t 
    {
      var a : None => a,
      var i : IsoNode =>
      {
        i1.next = (i.next = None.create())
      }
    };
    Builtin.print("Swing pointer - complete\n");

    Builtin.print("Test 3 - complete\n");
    // CHECK-L: Deallocating id 2
    // CHECK-L: Test 3 - complete
    // CHECK-L: Deallocating id 1
  }

  main()
  {
    Main.test1();
    Main.test2();
    Main.test3();
  }
}

// Copyright Microsoft and Project Verona Contributors.
// SPDX-License-Identifier: MIT

/*****************************************************************************
 * This examples illustrates the `when` syntax for operating over multiple
 * cowns.
 *****************************************************************************/

/**
 * This class represent a extremely naive bank account that simply has a single
 * unsigned integer field representing its balance.
 *
 * It supports two operations
 *  - Creating a new bank account
 *  - Transferring money between account.
 * These are both static methods on the class
 **/
class BankAccount
{
  balance: U64 & imm;

   /**
   * Creates a new bank account wrapped in a `cown` with an opening balance
   * from the supplied argument.
   **/
 create(opening_balance: U64 & imm): cown[BankAccount] & imm
  {
    var account = new BankAccount;
    account.balance = opening_balance;
    cown.create(account)
  }

  /**
   * This is a static method of bank account that takes two `cown`s of bank
   * accounts, and an amount to transfer between the accounts.
   * 
   * The method is effectively asynchronous, when it returns the bank accounts
   * may or may not have been updated, but the work to update the bank accounts
   * will have been scheduled.
   **/
  transfer(src: cown[BankAccount] & imm, 
           dst: cown[BankAccount] & imm,
           amount: U64 & imm)
  {
    /**
     * The syntax `when (src, dst) { C }` means, when exclusive access to
     * `src` and `dst` is available, then run `C` with exclusive access to 
     * both accounts.
     * The statement returns once the work is scheduled, but not necessarily
     * executed. 
     **/
    when (src, dst)
    {
      src.balance = src.balance - amount;
      dst.balance = dst.balance + amount;
      Builtin.print2("new balance, src={}, dst={}\n", src.balance, dst.balance);
    }
  }
}

class Main
{
  main()
  {
    // Create several bank accounts 
    var a1 = BankAccount.create(501);
    var a2 = BankAccount.create(502);
    var a3 = BankAccount.create(503);
    var a4 = BankAccount.create(504);

    // Perform a transfer in a cycle
    // Note that the runtime guarantees this will not deadlock.
    BankAccount.transfer(a1,a2,10);
    BankAccount.transfer(a2,a3,20);
    BankAccount.transfer(a3,a4,40);
    BankAccount.transfer(a4,a1,80);

    // Added for CI purposes
    Builtin.print("done\n");
    // CHECK-L: done
  }
}

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// This just directly includes the queue file. Stop gap until module system
// and packaging implenented
// Module system will work on a directory level, rather than individual file
use "library/queue.verona"

/**
 *  This uses the queue implementation, and builds a very simple worker to 
 *  job matcher.
 *  
 *  Workers can process a single job at a time. 
 **/

// Simple class to represent a Worker, has an id for tracing.
class Worker
{
  id: U64;

  do (self: mut, w: iso & Job) 
  {
    Builtin.print2("Worker {} starting job {}\n", self.id, w.id);
    Builtin.print2("Worker {} finishing job {}\n", self.id, w.id);
  }

  create(i: U64): Worker & iso
  {
    var w = new Worker;
    (mut-view w).id = i;
    w
  }
}

// Simple class to represent a job, has an id for tracing.
class Job
{
  id: U64;

  create(i: U64): Job & iso
  {
    var w = new Job;
    (mut-view w).id = i;
    w
  }

  final(self: mut)
  {
    Builtin.print1("Job {} finalised!\n", self.id);
  }
}

// Responsible for matching incoming jobs with workers.
class Scheduler
{
  // There are either too many jobs or too many workers.
  // This field represents the appropiate kind of queue for that state.
  queues: (Queue[Job] | Queue[Worker]) & iso;

  refine(q: Queue[Worker]) {}

  // Allocates a scheduler with its queue.
  // Returns a cown, for concurrency.
  create(): cown[Scheduler]
  {
    var s = new Scheduler;
    var q = Queue.create(0);
    Scheduler.refine(mut-view(q));
    s.queues = q;
    cown(s)
  }

  // Adds a job to the scheduler.
  add_job(rs: cown[Scheduler], j: Job & iso)
  {
    // Schedule turn on scheduler
    when (var s = rs) 
    {
      match (mut-view(s.queues))
      {
        var jq: Queue[Job] => jq.add(j), // No workers, so just add job j.
        var wq: Queue[Worker] =>
        {
          match (wq.remove())
          {
            var n: None => 
            {
              // No workers, so build job queue, and add job j.
              var jq = Queue.create(0);
              (mut-view jq).add(j);
              s.queues = jq;
            }
            var w: Worker =>
            {
              // Schedule worker and job to work together
              when () 
              { 
                (mut-view w).do(j); 
                // re-add worker to the scheduler.
                Scheduler.add_worker(rs, w) 
              }
            }
          }
        }
      }
    }
  }

  // Adds a worker to the scheduler.
  add_worker(rs: cown[Scheduler], w: Worker & iso)
  {
    // Schedule turn on scheduler
    when (var s = rs) 
    {
      match (mut-view(s.queues))
      {
        var wq: Queue[Worker] => wq.add(w), // No jobs, so just add worker w.
        var jq: Queue[Job] =>
        {
          match (jq.remove())
          {
            var n: None => 
            {
              // No jobs, so build worker queue, and add worker w.
              var wq = Queue.create(0);
              (mut-view wq).add(w);
              s.queues = wq;
            }
            var j: Job =>
            {
              // Schedule worker and job to work together
              when () 
              { 
                (mut-view w).do(j); 
                // re-add worker to the scheduler.
                Scheduler.add_worker(rs, w) 
              }
            }
          }
        }
      }
    }
  }
}

class Main
{
  main()
  {
    // Run some workload to show behaviours.
    var rs = Scheduler.create();
    Scheduler.add_worker(rs, Worker.create(1));
    Scheduler.add_worker(rs, Worker.create(2));
    Scheduler.add_worker(rs, Worker.create(3));
    Scheduler.add_worker(rs, Worker.create(4));
    Scheduler.add_job(rs, Job.create(100));
    Scheduler.add_job(rs, Job.create(101));
    Scheduler.add_job(rs, Job.create(102));
    Scheduler.add_job(rs, Job.create(103));
    Scheduler.add_job(rs, Job.create(104));
    Scheduler.add_job(rs, Job.create(105));
    Scheduler.add_job(rs, Job.create(106));
    Scheduler.add_job(rs, Job.create(107));
    Scheduler.add_worker(rs, Worker.create(5));
    Scheduler.add_worker(rs, Worker.create(6));
    Scheduler.add_job(rs, Job.create(108));
    Scheduler.add_job(rs, Job.create(109));
    Scheduler.add_job(rs, Job.create(110));
    Scheduler.add_job(rs, Job.create(111));
    Scheduler.add_job(rs, Job.create(112));
    Scheduler.add_job(rs, Job.create(113));
    Scheduler.add_job(rs, Job.create(114));
    Scheduler.add_job(rs, Job.create(115));
    Scheduler.add_job(rs, Job.create(116));
    Scheduler.add_job(rs, Job.create(117));
    Scheduler.add_job(rs, Job.create(118));


    Builtin.print("done\n");
    // CHECK-L: done
  }
}


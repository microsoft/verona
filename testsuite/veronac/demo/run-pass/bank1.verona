// Copyright Microsoft and Project Verona Contributors.
// SPDX-License-Identifier: MIT

/*****************************************************************************
 * This example is the simplest example of concurrency in Verona.
 * 
 * It illustrates the creation of cowns, and scheduling work on a single cown
 * using `when`.
 *****************************************************************************/

/**
 * This class represent a extremely naive bank account that simply has a single
 * unsigned integer field representing its balance.
 *
 * It supports two operations
 *  - Creating a new bank account
 *  - Adding to the accounts balance.
 * These are both static methods on the class
 **/
class BankAccount
{
  balance: U64 & imm;

  /**
   * Creates a new bank account wrapped in a `cown` with an opening balance
   * from the supplied argument.
   **/
  create(opening_balance: U64 & imm): cown[BankAccount] & imm
  {
    // Create a new BankAccount object
    var account = new BankAccount;
    // Update its balance
    account.balance = opening_balance;
    // Wrap it in a `cown` for concurrent access
    cown.create(account)
  }

  /**
   * This is a static method of bank account that takes a `cown` of a bank
   * account, and an amount to add to the bank account.
   * 
   * The method is effectively asynchronous, when it returns the bank account
   * may or may not have been updated, but the work to update the bank account
   * will have been scheduled.  Work on a single cown is always processed in
   * the order it is scheduled.
   **/
  add(account: cown[BankAccount] & imm, amount: U64 & imm)
  {
    /**
     * The syntax `when (account) { C }` means, when exclusive access to
     * `account` is available, then run `C` with exclusive access to account.
     * The statement returns once the work is scheduled, but not necessarily
     * executed. 
     **/
    when (account)
    {
      account.balance = account.balance + amount;
      Builtin.print1("new balance: {}\n", account.balance);
    }
  }
}

class Main
{
  example(start: U64 & imm)
  {
    // Allocates a fresh bank account
    var s = BankAccount.create(start);
    // Add increasing amounts to the bank account
    // The amounts will always be added in the order below as 
    // operations on a single cown are performed in the order they are
    // scheduled.
    BankAccount.add(s, 1);
    BankAccount.add(s, 2);
    BankAccount.add(s, 3);
    BankAccount.add(s, 4);
    BankAccount.add(s, 5);
    BankAccount.add(s, 6);
  }

  main()
  {
    // Runs four versions of the example
    // The examples are scheduled sequentially, but as the majority of the work
    // is asynchronous, the messages are printed in parallel.
    Main.example(100);
    Main.example(200);
    Main.example(300);
    Main.example(400);

    // Note that "done" can be printed in the output sequence before all or even
    // any of the "new balance" messages have been displayed.
    Builtin.print("done\n");

    // Check that the order is correct for the example starting with an opening
    // balance of 100. The following comments are used in CI to check the output

    // CHECK-L: new balance: 101
    // CHECK-L: new balance: 103
    // CHECK-L: new balance: 106
    // CHECK-L: new balance: 110
    // CHECK-L: new balance: 115
    // CHECK-L: new balance: 121
  }
}

// Copyright Microsoft and Project Verona Contributors.
// SPDX-License-Identifier: MIT
class Main { main() { } }

interface EmptyIface { }

class Concrete { }
class Cell[X] { }

// Any entity-like type is a subtype of the empty interface
static_assert(EmptyIface subtype EmptyIface);
static_assert(Concrete subtype EmptyIface);
static_assert(U64 subtype EmptyIface);
static_assert[X](cown[X] subtype EmptyIface);
static_assert[X](Cell[X] subtype EmptyIface);

// Capabilities on their own and unbound type parameters are not subtypes of
// the empty interface, since they aren't entity-like.
static_assert(mut not subtype EmptyIface);
static_assert(imm not subtype EmptyIface);
static_assert(iso not subtype EmptyIface);
static_assert[X](X not subtype EmptyIface);

// Intersection of an entity-like and a non entity-like work though
static_assert((Concrete & mut) subtype EmptyIface);
static_assert[X]((Cell[X] & mut) subtype EmptyIface);

// Unions with one non entity-like case shouldn't work
static_assert(((Concrete & iso) | mut) not subtype EmptyIface);
static_assert((Concrete | mut) not subtype EmptyIface);

// Copyright Microsoft and Project Verona Contributors.
// SPDX-License-Identifier: MIT
class Main { main() { } }

interface Get[X] {
  get(self: mut): X;
}

interface Set[X] {
  set(self: mut, value: X);
}

interface Swap[X] {
  swap(self: mut, value: X): X;
}

interface Field[X] {
  value: X;
}

interface Any { }
class Concrete { }

class Cell[X] {
  value: X;

  get(self: mut): X { self.value }
  set(self: mut, value: X) { self.value = value; }
  swap(self: mut, value: X): X { self.value = value }
}

// The rest of the assertions rely on these
static_assert(Concrete subtype Any);
static_assert(Any not subtype Concrete);

// Get[X] is co-variant wrt X
static_assert(Get[Concrete] subtype Get[Any]);
static_assert(Get[Any] not subtype Get[Concrete]);

// Set[X] is contra-variant wrt X
static_assert(Set[Any] subtype Set[Concrete]);
static_assert(Set[Concrete] not subtype Set[Any]);

// Swap[X] is invariant wrt X
static_assert(Swap[Any] not subtype Swap[Concrete]);
static_assert(Swap[Concrete] not subtype Swap[Any]);

// Field[X] is invariant wrt X
static_assert(Field[Any] not subtype Field[Concrete]);
static_assert(Field[Concrete] not subtype Field[Any]);

// Using the same type on both sides still works though
static_assert(Get[Any] subtype Get[Any]);
static_assert(Set[Any] subtype Set[Any]);
static_assert(Swap[Any] subtype Swap[Any]);
static_assert(Field[Any] subtype Field[Any]);
static_assert(Get[Concrete] subtype Get[Concrete]);
static_assert(Set[Concrete] subtype Set[Concrete]);
static_assert(Swap[Concrete] subtype Swap[Concrete]);
static_assert(Field[Concrete] subtype Field[Concrete]);
static_assert[X](Get[X] subtype Get[X]);
static_assert[X](Set[X] subtype Set[X]);
static_assert[X](Swap[X] subtype Swap[X]);
static_assert[X](Field[X] subtype Field[X]);

/**
 * These are the same assertions as above, but using Cell[_] on the left.
 */
// Get[X] is co-variant wrt X
static_assert(Cell[Concrete] subtype Get[Any]);
static_assert(Cell[Any] not subtype Get[Concrete]);

// Set[X] is contra-variant wrt X
static_assert(Cell[Any] subtype Set[Concrete]);
static_assert(Cell[Concrete] not subtype Set[Any]);

// Swap[X] is invariant wrt X
static_assert(Cell[Any] not subtype Swap[Concrete]);
static_assert(Cell[Concrete] not subtype Swap[Any]);

// Field[X] is invariant wrt X
static_assert(Cell[Any] not subtype Field[Concrete]);
static_assert(Cell[Concrete] not subtype Field[Any]);

// Using the same type on both sides still works though
static_assert(Cell[Any] subtype Get[Any]);
static_assert(Cell[Any] subtype Set[Any]);
static_assert(Cell[Any] subtype Swap[Any]);
static_assert(Cell[Any] subtype Field[Any]);
static_assert(Cell[Concrete] subtype Get[Concrete]);
static_assert(Cell[Concrete] subtype Set[Concrete]);
static_assert(Cell[Concrete] subtype Swap[Concrete]);
static_assert(Cell[Concrete] subtype Field[Concrete]);

static_assert[X](Cell[X] subtype Get[X]);
static_assert[X](Cell[X] subtype Set[X]);
static_assert[X](Cell[X] subtype Swap[X]);
static_assert[X](Cell[X] subtype Field[X]);

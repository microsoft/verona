// Copyright Microsoft and Project Verona Contributors.
// SPDX-License-Identifier: MIT


class Main {
  run(x: (False | True) & imm, y: (False | True) & imm)
  {
    Builtin.print3("{:#} AND {:#} = {:#}\n", x, y, x && y);
    Builtin.print3("{:#} OR {:#} = {:#}\n", x, y, x || y);
  }

  main() {
    var t = True.create();
    var f = False.create();
    Main.run(f, f);
    Main.run(f, t);
    Main.run(t, f);
    Main.run(t, t);

    // CHECK-L: False AND False = False
    // CHECK-L: False OR False = False
    // CHECK-L: False AND True = False
    // CHECK-L: False OR True = True
    // CHECK-L: True AND False = False
    // CHECK-L: True OR False = True
    // CHECK-L: True AND True = True
    // CHECK-L: True OR True = True
  }
}

class True {
  create(): True & imm {
    Builtin.freeze(new True)
  }

  or(self: imm, other: (False | True) & imm) : (False | True) & imm {
    True.create()
  }

  and(self: imm, other: (False | True) & imm) : (False | True) & imm {
    match other {
      var f: False => False.create(),
      var t: True => True.create(),
    }
  }
}

class False {
  create(): False & imm {
    Builtin.freeze(new False)
  }

  or(self: imm, other: (False | True) & imm) : (False | True) & imm {
    match other {
      var f: False => False.create(),
      var t: True => True.create(),
    }
  }

  and(self: imm, other: (False | True) & imm) : (False | True) & imm {
    False.create()
  }
}


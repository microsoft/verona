// Copyright Microsoft and Project Verona Contributors.
// SPDX-License-Identifier: MIT

class I32 {}
class I64
{
  trunc(arg: I64) : I32
  {
    let res : I32 = "std.trunci"(arg);
    return res;
  }
}
class F32 {}
class F64 {}

class Foo {
  a : I32;
  b : I64;
}

class Bar {
  a : I32;
  b : I64;
}

class Beep {
  c : F32;
}

class Boop {
  d : F64;
  // Static method
  getPI() : F64
  {
    return 3.1415;
  }
}

class One {
  f : Foo;
}

class Two {
  g : One;
}

foo() : I32
{
  // Test declaring (and allocating space for) class types
  let foo : Foo;
  let bar : Bar;
  let beep : Beep;
  let boop : Boop;

  // Test calling a static method
  let PI : F64 = Boop::getPI();
  boop.d = PI;

  // Test reading / writing to fields
  foo.a = I64::trunc(12);
  bar.a = foo.a;
  bar.b = 12;

  // Test nested access
  let two : Two;
  let a : I32 = two.g.f.a;
  two.g.f.b = 42; // This is an I64 by default

  return bar.a;
}

bar() : F64
{
  let PI : F64 = Boop::getPI();
  return PI;
}

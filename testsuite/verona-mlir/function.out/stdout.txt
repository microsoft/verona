module  {
  func @"$module-0__apply"() {
    return
  }
  func @"$module-0__retOnly"() -> i64 {
    %c42_i64 = constant 42 : i64
    return %c42_i64 : i64
  }
  func @"$module-0__retOneArg"(%arg0: i64) -> i64 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %c0_i32 = constant 0 : i32
    %1 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %arg0, %1 : !llvm.ptr<i64>
    %c0_i32_0 = constant 0 : i32
    %2 = llvm.getelementptr %0[%c0_i32_0] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %3 = llvm.load %2 : !llvm.ptr<i64>
    return %3 : i64
  }
  func @"$module-0__retFirstArg"(%arg0: i64, %arg1: i64) -> i64 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %c0_i32 = constant 0 : i32
    %1 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %arg0, %1 : !llvm.ptr<i64>
    %c1_i32_0 = constant 1 : i32
    %2 = llvm.alloca %c1_i32_0 x i64 : (i32) -> !llvm.ptr<i64>
    %c0_i32_1 = constant 0 : i32
    %3 = llvm.getelementptr %2[%c0_i32_1] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %arg1, %3 : !llvm.ptr<i64>
    %c0_i32_2 = constant 0 : i32
    %4 = llvm.getelementptr %0[%c0_i32_2] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %5 = llvm.load %4 : !llvm.ptr<i64>
    return %5 : i64
  }
  func @"$module-0__retSecondArg"(%arg0: i64, %arg1: i64) -> i64 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %c0_i32 = constant 0 : i32
    %1 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %arg0, %1 : !llvm.ptr<i64>
    %c1_i32_0 = constant 1 : i32
    %2 = llvm.alloca %c1_i32_0 x i64 : (i32) -> !llvm.ptr<i64>
    %c0_i32_1 = constant 0 : i32
    %3 = llvm.getelementptr %2[%c0_i32_1] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %arg1, %3 : !llvm.ptr<i64>
    %c0_i32_2 = constant 0 : i32
    %4 = llvm.getelementptr %2[%c0_i32_2] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %5 = llvm.load %4 : !llvm.ptr<i64>
    return %5 : i64
  }
  func @"$module-0__retSecondArgDiff"(%arg0: i64, %arg1: i32) -> i32 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %c0_i32 = constant 0 : i32
    %1 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %arg0, %1 : !llvm.ptr<i64>
    %c1_i32_0 = constant 1 : i32
    %2 = llvm.alloca %c1_i32_0 x i32 : (i32) -> !llvm.ptr<i32>
    %c0_i32_1 = constant 0 : i32
    %3 = llvm.getelementptr %2[%c0_i32_1] : (!llvm.ptr<i32>, i32) -> !llvm.ptr<i32>
    llvm.store %arg1, %3 : !llvm.ptr<i32>
    %c0_i32_2 = constant 0 : i32
    %4 = llvm.getelementptr %2[%c0_i32_2] : (!llvm.ptr<i32>, i32) -> !llvm.ptr<i32>
    %5 = llvm.load %4 : !llvm.ptr<i32>
    return %5 : i32
  }
}

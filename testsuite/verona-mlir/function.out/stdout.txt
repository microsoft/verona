module @__  {
  func @"____$module-0__apply"() {
    return
  }
  func @"____$module-0__retOnly"() -> i64 {
    %c42_i64 = constant 42 : i64
    return %c42_i64 : i64
  }
  func @"____$module-0__retOneArg"(%arg0: i64) -> i64 {
    %0 = memref.alloca() : memref<1xi64>
    %c0 = constant 0 : index
    memref.store %arg0, %0[%c0] : memref<1xi64>
    %c0_0 = constant 0 : index
    %1 = memref.load %0[%c0_0] : memref<1xi64>
    return %1 : i64
  }
  func @"____$module-0__retFirstArg"(%arg0: i64, %arg1: i64) -> i64 {
    %0 = memref.alloca() : memref<1xi64>
    %c0 = constant 0 : index
    memref.store %arg0, %0[%c0] : memref<1xi64>
    %1 = memref.alloca() : memref<1xi64>
    %c0_0 = constant 0 : index
    memref.store %arg1, %1[%c0_0] : memref<1xi64>
    %c0_1 = constant 0 : index
    %2 = memref.load %0[%c0_1] : memref<1xi64>
    return %2 : i64
  }
  func @"____$module-0__retSecondArg"(%arg0: i64, %arg1: i64) -> i64 {
    %0 = memref.alloca() : memref<1xi64>
    %c0 = constant 0 : index
    memref.store %arg0, %0[%c0] : memref<1xi64>
    %1 = memref.alloca() : memref<1xi64>
    %c0_0 = constant 0 : index
    memref.store %arg1, %1[%c0_0] : memref<1xi64>
    %c0_1 = constant 0 : index
    %2 = memref.load %1[%c0_1] : memref<1xi64>
    return %2 : i64
  }
  func @"____$module-0__retSecondArgDiff"(%arg0: i64, %arg1: i32) -> i32 {
    %0 = memref.alloca() : memref<1xi64>
    %c0 = constant 0 : index
    memref.store %arg0, %0[%c0] : memref<1xi64>
    %1 = memref.alloca() : memref<1xi32>
    %c0_0 = constant 0 : index
    memref.store %arg1, %1[%c0_0] : memref<1xi32>
    %c0_1 = constant 0 : index
    %2 = memref.load %1[%c0_1] : memref<1xi32>
    return %2 : i32
  }
}

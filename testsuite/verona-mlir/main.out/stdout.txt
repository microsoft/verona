module @__  {
  func @"____$module-0__bar"() -> i64 {
    %0 = memref.alloca() : memref<1xi64>
    %c0 = constant 0 : index
    %1 = memref.load %0[%c0] : memref<1xi64>
    %c21_i64 = constant 21 : i64
    %c0_0 = constant 0 : index
    memref.store %c21_i64, %0[%c0_0] : memref<1xi64>
    %c0_1 = constant 0 : index
    %2 = memref.load %0[%c0_1] : memref<1xi64>
    return %2 : i64
  }
  func @"____$module-0__foo"(%arg0: i64) -> i64 {
    %0 = memref.alloca() : memref<1xi64>
    %c0 = constant 0 : index
    memref.store %arg0, %0[%c0] : memref<1xi64>
    %1 = memref.alloca() : memref<1xi64>
    %c0_0 = constant 0 : index
    %2 = memref.load %1[%c0_0] : memref<1xi64>
    %3 = call @"____$module-0__bar"() : () -> i64
    %c0_1 = constant 0 : index
    memref.store %3, %1[%c0_1] : memref<1xi64>
    %4 = memref.alloca() : memref<1xi64>
    %c0_2 = constant 0 : index
    %5 = memref.load %4[%c0_2] : memref<1xi64>
    %c0_3 = constant 0 : index
    %6 = memref.load %0[%c0_3] : memref<1xi64>
    %c0_4 = constant 0 : index
    %7 = memref.load %1[%c0_4] : memref<1xi64>
    %8 = addi %7, %6 : i64
    %c0_5 = constant 0 : index
    memref.store %8, %4[%c0_5] : memref<1xi64>
    %c0_6 = constant 0 : index
    %9 = memref.load %4[%c0_6] : memref<1xi64>
    return %9 : i64
  }
  func @"____$module-0__main"() -> i64 {
    %0 = memref.alloca() : memref<1xi64>
    %c0 = constant 0 : index
    %1 = memref.load %0[%c0] : memref<1xi64>
    %c21_i64 = constant 21 : i64
    %c0_0 = constant 0 : index
    memref.store %c21_i64, %0[%c0_0] : memref<1xi64>
    %2 = memref.alloca() : memref<1xi64>
    %c0_1 = constant 0 : index
    %3 = memref.load %2[%c0_1] : memref<1xi64>
    %c0_2 = constant 0 : index
    %4 = memref.load %0[%c0_2] : memref<1xi64>
    %5 = call @"____$module-0__foo"(%4) : (i64) -> i64
    %c0_3 = constant 0 : index
    memref.store %5, %2[%c0_3] : memref<1xi64>
    %c0_4 = constant 0 : index
    %6 = memref.load %2[%c0_4] : memref<1xi64>
    return %6 : i64
  }
}

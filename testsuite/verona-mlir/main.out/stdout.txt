module  {
  func @"$module-0__I64__+"(%arg0: i64, %arg1: i64) -> i64 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %1 = llvm.mlir.addressof @std.addi : !llvm.ptr<array<8 x i8>>
    %2 = llvm.alloca %c1_i32 x !llvm.struct<(i64, i64)> : (i32) -> !llvm.ptr<struct<(i64, i64)>>
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %2[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    llvm.store %arg0, %3 : !llvm.ptr<i64>
    %4 = llvm.getelementptr %2[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    llvm.store %arg1, %4 : !llvm.ptr<i64>
    %5 = llvm.getelementptr %2[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %6 = llvm.load %5 : !llvm.ptr<i64>
    %7 = llvm.getelementptr %2[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %8 = llvm.load %7 : !llvm.ptr<i64>
    %9 = addi %6, %8 : i64
    %10 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %9, %10 : !llvm.ptr<i64>
    %11 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %12 = llvm.load %11 : !llvm.ptr<i64>
    return %12 : i64
  }
  func @"$module-0__Math__getTruth"() -> i64 {
    %c42_i64 = constant 42 : i64
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %c0_i32 = constant 0 : i32
    %1 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %c42_i64, %1 : !llvm.ptr<i64>
    %2 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %3 = llvm.load %2 : !llvm.ptr<i64>
    return %3 : i64
  }
  func @"$module-0__Math__getRandom"() -> i64 {
    %c1_i64 = constant 1 : i64
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %c0_i32 = constant 0 : i32
    %1 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %c1_i64, %1 : !llvm.ptr<i64>
    %2 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %3 = llvm.load %2 : !llvm.ptr<i64>
    return %3 : i64
  }
  func @"$module-0__bar"() -> i64 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %1 = call @"$module-0__Math__getRandom"() : () -> i64
    %c0_i32 = constant 0 : i32
    %2 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %1, %2 : !llvm.ptr<i64>
    %3 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %4 = llvm.load %3 : !llvm.ptr<i64>
    return %4 : i64
  }
  func @"$module-0__foo"(%arg0: i64) -> i64 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %1 = call @"$module-0__bar"() : () -> i64
    %c0_i32 = constant 0 : i32
    %2 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %1, %2 : !llvm.ptr<i64>
    %3 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %4 = llvm.alloca %c1_i32 x !llvm.struct<(i64, i64)> : (i32) -> !llvm.ptr<struct<(i64, i64)>>
    %5 = llvm.getelementptr %4[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %6 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %7 = llvm.load %6 : !llvm.ptr<i64>
    llvm.store %7, %5 : !llvm.ptr<i64>
    %8 = llvm.getelementptr %4[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    llvm.store %arg0, %8 : !llvm.ptr<i64>
    %9 = llvm.getelementptr %4[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %10 = llvm.load %9 : !llvm.ptr<i64>
    %11 = llvm.getelementptr %4[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %12 = llvm.load %11 : !llvm.ptr<i64>
    %13 = call @"$module-0__I64__+"(%10, %12) : (i64, i64) -> i64
    %14 = llvm.getelementptr %3[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %13, %14 : !llvm.ptr<i64>
    %15 = llvm.getelementptr %3[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %16 = llvm.load %15 : !llvm.ptr<i64>
    return %16 : i64
  }
  func @main() -> i64 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x !llvm.struct<"Math", (i64, i64)> : (i32) -> !llvm.ptr<struct<"Math", (i64, i64)>>
    %1 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %2 = call @"$module-0__Math__getTruth"() : () -> i64
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %1[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %2, %3 : !llvm.ptr<i64>
    %4 = llvm.getelementptr %0[%c0_i32, %c0_i32] : (!llvm.ptr<struct<"Math", (i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %5 = llvm.getelementptr %1[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %6 = llvm.load %5 : !llvm.ptr<i64>
    llvm.store %6, %4 : !llvm.ptr<i64>
    %7 = llvm.getelementptr %0[%c0_i32, %c1_i32] : (!llvm.ptr<struct<"Math", (i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %8 = llvm.alloca %c1_i32 x !llvm.struct<(i64, i64)> : (i32) -> !llvm.ptr<struct<(i64, i64)>>
    %9 = llvm.getelementptr %8[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %10 = llvm.getelementptr %1[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %11 = llvm.load %10 : !llvm.ptr<i64>
    llvm.store %11, %9 : !llvm.ptr<i64>
    %12 = llvm.getelementptr %8[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %13 = llvm.getelementptr %1[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %14 = llvm.load %13 : !llvm.ptr<i64>
    llvm.store %14, %12 : !llvm.ptr<i64>
    %15 = llvm.getelementptr %8[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %16 = llvm.load %15 : !llvm.ptr<i64>
    %17 = llvm.getelementptr %8[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %18 = llvm.load %17 : !llvm.ptr<i64>
    %19 = call @"$module-0__I64__+"(%16, %18) : (i64, i64) -> i64
    llvm.store %19, %7 : !llvm.ptr<i64>
    %20 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %c21_i64 = constant 21 : i64
    %21 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %22 = llvm.getelementptr %21[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %c21_i64, %22 : !llvm.ptr<i64>
    %23 = llvm.getelementptr %21[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %24 = llvm.load %23 : !llvm.ptr<i64>
    %25 = call @"$module-0__foo"(%24) : (i64) -> i64
    %26 = llvm.getelementptr %20[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %25, %26 : !llvm.ptr<i64>
    %27 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %28 = llvm.getelementptr %0[%c0_i32, %c0_i32] : (!llvm.ptr<struct<"Math", (i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %29 = llvm.alloca %c1_i32 x !llvm.struct<(i64, i64)> : (i32) -> !llvm.ptr<struct<(i64, i64)>>
    %30 = llvm.getelementptr %29[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %31 = llvm.getelementptr %20[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %32 = llvm.load %31 : !llvm.ptr<i64>
    llvm.store %32, %30 : !llvm.ptr<i64>
    %33 = llvm.getelementptr %29[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %34 = llvm.load %28 : !llvm.ptr<i64>
    llvm.store %34, %33 : !llvm.ptr<i64>
    %35 = llvm.getelementptr %29[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %36 = llvm.load %35 : !llvm.ptr<i64>
    %37 = llvm.getelementptr %29[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %38 = llvm.load %37 : !llvm.ptr<i64>
    %39 = call @"$module-0__I64__+"(%36, %38) : (i64, i64) -> i64
    %40 = llvm.getelementptr %27[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %39, %40 : !llvm.ptr<i64>
    %41 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %42 = llvm.getelementptr %0[%c0_i32, %c1_i32] : (!llvm.ptr<struct<"Math", (i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %43 = llvm.alloca %c1_i32 x !llvm.struct<(i64, i64)> : (i32) -> !llvm.ptr<struct<(i64, i64)>>
    %44 = llvm.getelementptr %43[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %45 = llvm.getelementptr %27[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %46 = llvm.load %45 : !llvm.ptr<i64>
    llvm.store %46, %44 : !llvm.ptr<i64>
    %47 = llvm.getelementptr %43[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %48 = llvm.load %42 : !llvm.ptr<i64>
    llvm.store %48, %47 : !llvm.ptr<i64>
    %49 = llvm.getelementptr %43[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %50 = llvm.load %49 : !llvm.ptr<i64>
    %51 = llvm.getelementptr %43[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %52 = llvm.load %51 : !llvm.ptr<i64>
    %53 = call @"$module-0__I64__+"(%50, %52) : (i64, i64) -> i64
    %54 = llvm.getelementptr %41[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %53, %54 : !llvm.ptr<i64>
    %55 = llvm.getelementptr %41[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %56 = llvm.load %55 : !llvm.ptr<i64>
    return %56 : i64
  }
  llvm.mlir.global private constant @std.addi("std.addi")
}

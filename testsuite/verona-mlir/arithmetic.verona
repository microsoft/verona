// Copyright Microsoft and Project Verona Contributors.
// SPDX-License-Identifier: MIT

class I32
{
  +(lhs: I32, rhs: I32) : I32
  {
    let res : I32 = "std.addi"(lhs, rhs);
    return res;
  }
  -(lhs: I32, rhs: I32) : I32
  {
    let res : I32 = "std.subi"(lhs, rhs);
    return res;
  }
  *(lhs: I32, rhs: I32) : I32
  {
    let res : I32 = "std.muli"(lhs, rhs);
    return res;
  }
  /(lhs: I32, rhs: I32) : I32
  {
    let res : I32 = "std.divi_signed"(lhs, rhs);
    return res;
  }
  ext(arg: I32) : I64
  {
    let res : I64 = "std.sexti"(arg);
    return res;
  }
}
class U32
{
  +(lhs: U32, rhs: U32) : U32
  {
    let res : U32 = "std.addi"(lhs, rhs);
    return res;
  }
  ext(arg: U32) : U64
  {
    let res : U64 = "std.zexti"(arg);
    return res;
  }
}
class I64
{
  +(lhs: I64, rhs: I64) : I64
  {
    let res : I64 = "std.addi"(lhs, rhs);
    return res;
  }
  trunc(arg: I64) : I32
  {
    let res : I32 = "std.trunci"(arg);
    return res;
  }
  toFloat(arg: U64) : F32
  {
    let res : F32 = "std.sitofp"(arg);
    return res;
  }
  toDouble(arg: U64) : F64
  {
    let res : F64 = "std.sitofp"(arg);
    return res;
  }
}
class U64
{
  +(lhs: U64, rhs: U64) : U64
  {
    let res : U64 = "std.addi"(lhs, rhs);
    return res;
  }
  trunc(arg: U64) : U32
  {
    let res : U32 = "std.trunci"(arg);
    return res;
  }
  toFloat(arg: U64) : F32
  {
    let res : F32 = "std.uitofp"(arg);
    return res;
  }
  toDouble(arg: U64) : F64
  {
    let res : F64 = "std.uitofp"(arg);
    return res;
  }
}
class F32
{
  +(lhs: F32, rhs: F32) : F32
  {
    let res : F32 = "std.addf"(lhs, rhs);
    return res;
  }
  -(lhs: F32, rhs: F32) : F32
  {
    let res : F32 = "std.subf"(lhs, rhs);
    return res;
  }
  *(lhs: F32, rhs: F32) : F32
  {
    let res : F32 = "std.mulf"(lhs, rhs);
    return res;
  }
  /(lhs: F32, rhs: F32) : F32
  {
    let res : F32 = "std.divf"(lhs, rhs);
    return res;
  }
  ext(arg: F32) : F64
  {
    let res : F64 = "std.fpext"(arg);
    return res;
  }
}
class F64
{
  +(lhs: F64, rhs: F64) : F64
  {
    let res : F64 = "std.addf"(lhs, rhs);
    return res;
  }
  trunc(arg: F64) : F32
  {
    let res : F32 = "std.fptrunc"(arg);
    return res;
  }
  toInt(arg: F64) : I64
  {
    let res : I64 = "std.fptosi"(arg);
    return res;
  }
  toUInt(arg: F64) : U64
  {
    let res : U64 = "std.fptoui"(arg);
    return res;
  }
  neg(arg: F64) : F64
  {
    let res : F64 = "std.negf"(arg);
    return res;
  }
}

simple_int(a: I32, b: I32): I32
{
  // This is what a + b will be lowered to
  var x : I32 = I32::+(a, b);
  x = I32::-(a, b);
  x = I32::*(a, b);
  x = I32::/(a, b);
  return x;
}

simple_fp(a: F32, b: F32): F32
{
  // This is what a + b will be lowered to
  var x : F32 = F32::+(a, b);
  x = F32::-(a, b);
  x = F32::*(a, b);
  x = F32::/(a, b);
  return x;
}

int_upcast(a: I32, b: I64): I64
{
  // This is what a + b will be lowered to
  let a64 : I64 = I32::ext(a);
  let x : I64 = I64::+(a64, b);
  return x;
}

fp_upcast(a: F64, b: F32): F64
{
  // This is what a + b will be lowered to
  let b64 : F64 = F32::ext(b);
  let x : F64 = F64::+(a, b64);
  return x;
}

simple_unsigned(a: U32, b: U32) : U32
{
  // This is what a + b will be lowered to
  var x : U32 = U32::+(a, b);
  return x;
}

unsigned_upcast(a: U32, b: U64): U64
{
  // This is what a + b will be lowered to
  let a64 : U64 = U32::ext(a);
  var x : U64 = U64::+(a64, b);
  return x;
}

literals(): F64
{
  // This is x:I32 = 21; x + 21;
  let x32 : I32 = I64::trunc(21);
  var x : I64 = I32::ext(x32);
  x = I64::+(x, 21);

  // This is y:F32 = 3.14; y + 0.0015;
  let y32 : F32 = F64::trunc(3.14);
  var y : F64 = F32::ext(y32);
  y = F64::+(y, 0.0015);

  return y;
}

conversions(): I64
{
  var x : F64 = I64::toDouble(42);
  x = F64::neg(x);
  var y : I64 = F64::toInt(x);
  return y;
}

update_value(): I64
{
  var a : I64 = 21;
  a = I64::+(a, 21);
  return a;
}

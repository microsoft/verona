module  {
  func @"$module-0__I32__+"(%arg0: i32, %arg1: i32) -> i32 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr<i32>
    %1 = llvm.mlir.addressof @std.addi : !llvm.ptr<array<8 x i8>>
    %2 = llvm.alloca %c1_i32 x !llvm.struct<(i32, i32)> : (i32) -> !llvm.ptr<struct<(i32, i32)>>
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %2[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    llvm.store %arg0, %3 : !llvm.ptr<i32>
    %4 = llvm.getelementptr %2[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    llvm.store %arg1, %4 : !llvm.ptr<i32>
    %5 = llvm.getelementptr %2[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    %6 = llvm.load %5 : !llvm.ptr<i32>
    %7 = llvm.getelementptr %2[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    %8 = llvm.load %7 : !llvm.ptr<i32>
    %9 = addi %6, %8 : i32
    %10 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i32>, i32) -> !llvm.ptr<i32>
    llvm.store %9, %10 : !llvm.ptr<i32>
    %11 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i32>, i32) -> !llvm.ptr<i32>
    %12 = llvm.load %11 : !llvm.ptr<i32>
    return %12 : i32
  }
  func @"$module-0__I32__-"(%arg0: i32, %arg1: i32) -> i32 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr<i32>
    %1 = llvm.mlir.addressof @std.subi : !llvm.ptr<array<8 x i8>>
    %2 = llvm.alloca %c1_i32 x !llvm.struct<(i32, i32)> : (i32) -> !llvm.ptr<struct<(i32, i32)>>
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %2[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    llvm.store %arg0, %3 : !llvm.ptr<i32>
    %4 = llvm.getelementptr %2[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    llvm.store %arg1, %4 : !llvm.ptr<i32>
    %5 = llvm.getelementptr %2[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    %6 = llvm.load %5 : !llvm.ptr<i32>
    %7 = llvm.getelementptr %2[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    %8 = llvm.load %7 : !llvm.ptr<i32>
    %9 = subi %6, %8 : i32
    %10 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i32>, i32) -> !llvm.ptr<i32>
    llvm.store %9, %10 : !llvm.ptr<i32>
    %11 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i32>, i32) -> !llvm.ptr<i32>
    %12 = llvm.load %11 : !llvm.ptr<i32>
    return %12 : i32
  }
  func @"$module-0__I32__*"(%arg0: i32, %arg1: i32) -> i32 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr<i32>
    %1 = llvm.mlir.addressof @std.muli : !llvm.ptr<array<8 x i8>>
    %2 = llvm.alloca %c1_i32 x !llvm.struct<(i32, i32)> : (i32) -> !llvm.ptr<struct<(i32, i32)>>
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %2[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    llvm.store %arg0, %3 : !llvm.ptr<i32>
    %4 = llvm.getelementptr %2[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    llvm.store %arg1, %4 : !llvm.ptr<i32>
    %5 = llvm.getelementptr %2[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    %6 = llvm.load %5 : !llvm.ptr<i32>
    %7 = llvm.getelementptr %2[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    %8 = llvm.load %7 : !llvm.ptr<i32>
    %9 = muli %6, %8 : i32
    %10 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i32>, i32) -> !llvm.ptr<i32>
    llvm.store %9, %10 : !llvm.ptr<i32>
    %11 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i32>, i32) -> !llvm.ptr<i32>
    %12 = llvm.load %11 : !llvm.ptr<i32>
    return %12 : i32
  }
  func @"$module-0__I32__/"(%arg0: i32, %arg1: i32) -> i32 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr<i32>
    %1 = llvm.mlir.addressof @std.divi_signed : !llvm.ptr<array<15 x i8>>
    %2 = llvm.alloca %c1_i32 x !llvm.struct<(i32, i32)> : (i32) -> !llvm.ptr<struct<(i32, i32)>>
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %2[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    llvm.store %arg0, %3 : !llvm.ptr<i32>
    %4 = llvm.getelementptr %2[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    llvm.store %arg1, %4 : !llvm.ptr<i32>
    %5 = llvm.getelementptr %2[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    %6 = llvm.load %5 : !llvm.ptr<i32>
    %7 = llvm.getelementptr %2[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    %8 = llvm.load %7 : !llvm.ptr<i32>
    %9 = divi_signed %6, %8 : i32
    %10 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i32>, i32) -> !llvm.ptr<i32>
    llvm.store %9, %10 : !llvm.ptr<i32>
    %11 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i32>, i32) -> !llvm.ptr<i32>
    %12 = llvm.load %11 : !llvm.ptr<i32>
    return %12 : i32
  }
  func @"$module-0__I32__ext"(%arg0: i32) -> i64 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %1 = llvm.mlir.addressof @std.sexti : !llvm.ptr<array<9 x i8>>
    %2 = sexti %arg0 : i32 to i64
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %2, %3 : !llvm.ptr<i64>
    %4 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %5 = llvm.load %4 : !llvm.ptr<i64>
    return %5 : i64
  }
  func @"$module-0__U32__+"(%arg0: i32, %arg1: i32) -> i32 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr<i32>
    %1 = llvm.mlir.addressof @std.addi : !llvm.ptr<array<8 x i8>>
    %2 = llvm.alloca %c1_i32 x !llvm.struct<(i32, i32)> : (i32) -> !llvm.ptr<struct<(i32, i32)>>
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %2[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    llvm.store %arg0, %3 : !llvm.ptr<i32>
    %4 = llvm.getelementptr %2[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    llvm.store %arg1, %4 : !llvm.ptr<i32>
    %5 = llvm.getelementptr %2[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    %6 = llvm.load %5 : !llvm.ptr<i32>
    %7 = llvm.getelementptr %2[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    %8 = llvm.load %7 : !llvm.ptr<i32>
    %9 = addi %6, %8 : i32
    %10 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i32>, i32) -> !llvm.ptr<i32>
    llvm.store %9, %10 : !llvm.ptr<i32>
    %11 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i32>, i32) -> !llvm.ptr<i32>
    %12 = llvm.load %11 : !llvm.ptr<i32>
    return %12 : i32
  }
  func @"$module-0__U32__ext"(%arg0: i32) -> i64 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %1 = llvm.mlir.addressof @std.zexti : !llvm.ptr<array<9 x i8>>
    %2 = zexti %arg0 : i32 to i64
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %2, %3 : !llvm.ptr<i64>
    %4 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %5 = llvm.load %4 : !llvm.ptr<i64>
    return %5 : i64
  }
  func @"$module-0__I64__+"(%arg0: i64, %arg1: i64) -> i64 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %1 = llvm.mlir.addressof @std.addi : !llvm.ptr<array<8 x i8>>
    %2 = llvm.alloca %c1_i32 x !llvm.struct<(i64, i64)> : (i32) -> !llvm.ptr<struct<(i64, i64)>>
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %2[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    llvm.store %arg0, %3 : !llvm.ptr<i64>
    %4 = llvm.getelementptr %2[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    llvm.store %arg1, %4 : !llvm.ptr<i64>
    %5 = llvm.getelementptr %2[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %6 = llvm.load %5 : !llvm.ptr<i64>
    %7 = llvm.getelementptr %2[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %8 = llvm.load %7 : !llvm.ptr<i64>
    %9 = addi %6, %8 : i64
    %10 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %9, %10 : !llvm.ptr<i64>
    %11 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %12 = llvm.load %11 : !llvm.ptr<i64>
    return %12 : i64
  }
  func @"$module-0__I64__trunc"(%arg0: i64) -> i32 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr<i32>
    %1 = llvm.mlir.addressof @std.trunci : !llvm.ptr<array<10 x i8>>
    %2 = trunci %arg0 : i64 to i32
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i32>, i32) -> !llvm.ptr<i32>
    llvm.store %2, %3 : !llvm.ptr<i32>
    %4 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i32>, i32) -> !llvm.ptr<i32>
    %5 = llvm.load %4 : !llvm.ptr<i32>
    return %5 : i32
  }
  func @"$module-0__I64__toFloat"(%arg0: i64) -> f32 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr<f32>
    %1 = llvm.mlir.addressof @std.sitofp : !llvm.ptr<array<10 x i8>>
    %2 = sitofp %arg0 : i64 to f32
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f32>, i32) -> !llvm.ptr<f32>
    llvm.store %2, %3 : !llvm.ptr<f32>
    %4 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f32>, i32) -> !llvm.ptr<f32>
    %5 = llvm.load %4 : !llvm.ptr<f32>
    return %5 : f32
  }
  func @"$module-0__I64__toDouble"(%arg0: i64) -> f64 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr<f64>
    %1 = llvm.mlir.addressof @std.sitofp : !llvm.ptr<array<10 x i8>>
    %2 = sitofp %arg0 : i64 to f64
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    llvm.store %2, %3 : !llvm.ptr<f64>
    %4 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    %5 = llvm.load %4 : !llvm.ptr<f64>
    return %5 : f64
  }
  func @"$module-0__U64__+"(%arg0: i64, %arg1: i64) -> i64 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %1 = llvm.mlir.addressof @std.addi : !llvm.ptr<array<8 x i8>>
    %2 = llvm.alloca %c1_i32 x !llvm.struct<(i64, i64)> : (i32) -> !llvm.ptr<struct<(i64, i64)>>
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %2[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    llvm.store %arg0, %3 : !llvm.ptr<i64>
    %4 = llvm.getelementptr %2[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    llvm.store %arg1, %4 : !llvm.ptr<i64>
    %5 = llvm.getelementptr %2[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %6 = llvm.load %5 : !llvm.ptr<i64>
    %7 = llvm.getelementptr %2[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %8 = llvm.load %7 : !llvm.ptr<i64>
    %9 = addi %6, %8 : i64
    %10 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %9, %10 : !llvm.ptr<i64>
    %11 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %12 = llvm.load %11 : !llvm.ptr<i64>
    return %12 : i64
  }
  func @"$module-0__U64__trunc"(%arg0: i64) -> i32 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr<i32>
    %1 = llvm.mlir.addressof @std.trunci : !llvm.ptr<array<10 x i8>>
    %2 = trunci %arg0 : i64 to i32
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i32>, i32) -> !llvm.ptr<i32>
    llvm.store %2, %3 : !llvm.ptr<i32>
    %4 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i32>, i32) -> !llvm.ptr<i32>
    %5 = llvm.load %4 : !llvm.ptr<i32>
    return %5 : i32
  }
  func @"$module-0__U64__toFloat"(%arg0: i64) -> f32 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr<f32>
    %1 = llvm.mlir.addressof @std.uitofp : !llvm.ptr<array<10 x i8>>
    %2 = uitofp %arg0 : i64 to f32
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f32>, i32) -> !llvm.ptr<f32>
    llvm.store %2, %3 : !llvm.ptr<f32>
    %4 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f32>, i32) -> !llvm.ptr<f32>
    %5 = llvm.load %4 : !llvm.ptr<f32>
    return %5 : f32
  }
  func @"$module-0__U64__toDouble"(%arg0: i64) -> f64 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr<f64>
    %1 = llvm.mlir.addressof @std.uitofp : !llvm.ptr<array<10 x i8>>
    %2 = uitofp %arg0 : i64 to f64
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    llvm.store %2, %3 : !llvm.ptr<f64>
    %4 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    %5 = llvm.load %4 : !llvm.ptr<f64>
    return %5 : f64
  }
  func @"$module-0__F32__+"(%arg0: f32, %arg1: f32) -> f32 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr<f32>
    %1 = llvm.mlir.addressof @std.addf : !llvm.ptr<array<8 x i8>>
    %2 = llvm.alloca %c1_i32 x !llvm.struct<(f32, f32)> : (i32) -> !llvm.ptr<struct<(f32, f32)>>
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %2[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    llvm.store %arg0, %3 : !llvm.ptr<f32>
    %4 = llvm.getelementptr %2[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    llvm.store %arg1, %4 : !llvm.ptr<f32>
    %5 = llvm.getelementptr %2[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    %6 = llvm.load %5 : !llvm.ptr<f32>
    %7 = llvm.getelementptr %2[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    %8 = llvm.load %7 : !llvm.ptr<f32>
    %9 = addf %6, %8 : f32
    %10 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f32>, i32) -> !llvm.ptr<f32>
    llvm.store %9, %10 : !llvm.ptr<f32>
    %11 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f32>, i32) -> !llvm.ptr<f32>
    %12 = llvm.load %11 : !llvm.ptr<f32>
    return %12 : f32
  }
  func @"$module-0__F32__-"(%arg0: f32, %arg1: f32) -> f32 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr<f32>
    %1 = llvm.mlir.addressof @std.subf : !llvm.ptr<array<8 x i8>>
    %2 = llvm.alloca %c1_i32 x !llvm.struct<(f32, f32)> : (i32) -> !llvm.ptr<struct<(f32, f32)>>
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %2[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    llvm.store %arg0, %3 : !llvm.ptr<f32>
    %4 = llvm.getelementptr %2[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    llvm.store %arg1, %4 : !llvm.ptr<f32>
    %5 = llvm.getelementptr %2[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    %6 = llvm.load %5 : !llvm.ptr<f32>
    %7 = llvm.getelementptr %2[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    %8 = llvm.load %7 : !llvm.ptr<f32>
    %9 = subf %6, %8 : f32
    %10 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f32>, i32) -> !llvm.ptr<f32>
    llvm.store %9, %10 : !llvm.ptr<f32>
    %11 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f32>, i32) -> !llvm.ptr<f32>
    %12 = llvm.load %11 : !llvm.ptr<f32>
    return %12 : f32
  }
  func @"$module-0__F32__*"(%arg0: f32, %arg1: f32) -> f32 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr<f32>
    %1 = llvm.mlir.addressof @std.mulf : !llvm.ptr<array<8 x i8>>
    %2 = llvm.alloca %c1_i32 x !llvm.struct<(f32, f32)> : (i32) -> !llvm.ptr<struct<(f32, f32)>>
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %2[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    llvm.store %arg0, %3 : !llvm.ptr<f32>
    %4 = llvm.getelementptr %2[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    llvm.store %arg1, %4 : !llvm.ptr<f32>
    %5 = llvm.getelementptr %2[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    %6 = llvm.load %5 : !llvm.ptr<f32>
    %7 = llvm.getelementptr %2[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    %8 = llvm.load %7 : !llvm.ptr<f32>
    %9 = mulf %6, %8 : f32
    %10 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f32>, i32) -> !llvm.ptr<f32>
    llvm.store %9, %10 : !llvm.ptr<f32>
    %11 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f32>, i32) -> !llvm.ptr<f32>
    %12 = llvm.load %11 : !llvm.ptr<f32>
    return %12 : f32
  }
  func @"$module-0__F32__/"(%arg0: f32, %arg1: f32) -> f32 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr<f32>
    %1 = llvm.mlir.addressof @std.divf : !llvm.ptr<array<8 x i8>>
    %2 = llvm.alloca %c1_i32 x !llvm.struct<(f32, f32)> : (i32) -> !llvm.ptr<struct<(f32, f32)>>
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %2[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    llvm.store %arg0, %3 : !llvm.ptr<f32>
    %4 = llvm.getelementptr %2[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    llvm.store %arg1, %4 : !llvm.ptr<f32>
    %5 = llvm.getelementptr %2[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    %6 = llvm.load %5 : !llvm.ptr<f32>
    %7 = llvm.getelementptr %2[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    %8 = llvm.load %7 : !llvm.ptr<f32>
    %9 = divf %6, %8 : f32
    %10 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f32>, i32) -> !llvm.ptr<f32>
    llvm.store %9, %10 : !llvm.ptr<f32>
    %11 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f32>, i32) -> !llvm.ptr<f32>
    %12 = llvm.load %11 : !llvm.ptr<f32>
    return %12 : f32
  }
  func @"$module-0__F32__ext"(%arg0: f32) -> f64 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr<f64>
    %1 = llvm.mlir.addressof @std.fpext : !llvm.ptr<array<9 x i8>>
    %2 = fpext %arg0 : f32 to f64
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    llvm.store %2, %3 : !llvm.ptr<f64>
    %4 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    %5 = llvm.load %4 : !llvm.ptr<f64>
    return %5 : f64
  }
  func @"$module-0__F64__+"(%arg0: f64, %arg1: f64) -> f64 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr<f64>
    %1 = llvm.mlir.addressof @std.addf : !llvm.ptr<array<8 x i8>>
    %2 = llvm.alloca %c1_i32 x !llvm.struct<(f64, f64)> : (i32) -> !llvm.ptr<struct<(f64, f64)>>
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %2[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(f64, f64)>>, i32, i32) -> !llvm.ptr<f64>
    llvm.store %arg0, %3 : !llvm.ptr<f64>
    %4 = llvm.getelementptr %2[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(f64, f64)>>, i32, i32) -> !llvm.ptr<f64>
    llvm.store %arg1, %4 : !llvm.ptr<f64>
    %5 = llvm.getelementptr %2[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(f64, f64)>>, i32, i32) -> !llvm.ptr<f64>
    %6 = llvm.load %5 : !llvm.ptr<f64>
    %7 = llvm.getelementptr %2[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(f64, f64)>>, i32, i32) -> !llvm.ptr<f64>
    %8 = llvm.load %7 : !llvm.ptr<f64>
    %9 = addf %6, %8 : f64
    %10 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    llvm.store %9, %10 : !llvm.ptr<f64>
    %11 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    %12 = llvm.load %11 : !llvm.ptr<f64>
    return %12 : f64
  }
  func @"$module-0__F64__trunc"(%arg0: f64) -> f32 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr<f32>
    %1 = llvm.mlir.addressof @std.fptrunc : !llvm.ptr<array<11 x i8>>
    %2 = fptrunc %arg0 : f64 to f32
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f32>, i32) -> !llvm.ptr<f32>
    llvm.store %2, %3 : !llvm.ptr<f32>
    %4 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f32>, i32) -> !llvm.ptr<f32>
    %5 = llvm.load %4 : !llvm.ptr<f32>
    return %5 : f32
  }
  func @"$module-0__F64__toInt"(%arg0: f64) -> i64 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %1 = llvm.mlir.addressof @std.fptosi : !llvm.ptr<array<10 x i8>>
    %2 = fptosi %arg0 : f64 to i64
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %2, %3 : !llvm.ptr<i64>
    %4 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %5 = llvm.load %4 : !llvm.ptr<i64>
    return %5 : i64
  }
  func @"$module-0__F64__toUInt"(%arg0: f64) -> i64 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %1 = llvm.mlir.addressof @std.fptoui : !llvm.ptr<array<10 x i8>>
    %2 = fptoui %arg0 : f64 to i64
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %2, %3 : !llvm.ptr<i64>
    %4 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %5 = llvm.load %4 : !llvm.ptr<i64>
    return %5 : i64
  }
  func @"$module-0__F64__neg"(%arg0: f64) -> f64 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr<f64>
    %1 = llvm.mlir.addressof @std.negf : !llvm.ptr<array<8 x i8>>
    %2 = negf %arg0 : f64
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    llvm.store %2, %3 : !llvm.ptr<f64>
    %4 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    %5 = llvm.load %4 : !llvm.ptr<f64>
    return %5 : f64
  }
  func @"$module-0__simple_int"(%arg0: i32, %arg1: i32) -> i32 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr<i32>
    %1 = llvm.alloca %c1_i32 x !llvm.struct<(i32, i32)> : (i32) -> !llvm.ptr<struct<(i32, i32)>>
    %c0_i32 = constant 0 : i32
    %2 = llvm.getelementptr %1[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    llvm.store %arg0, %2 : !llvm.ptr<i32>
    %3 = llvm.getelementptr %1[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    llvm.store %arg1, %3 : !llvm.ptr<i32>
    %4 = llvm.getelementptr %1[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    %5 = llvm.load %4 : !llvm.ptr<i32>
    %6 = llvm.getelementptr %1[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    %7 = llvm.load %6 : !llvm.ptr<i32>
    %8 = call @"$module-0__I32__+"(%5, %7) : (i32, i32) -> i32
    %9 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i32>, i32) -> !llvm.ptr<i32>
    llvm.store %8, %9 : !llvm.ptr<i32>
    %10 = llvm.alloca %c1_i32 x !llvm.struct<(i32, i32)> : (i32) -> !llvm.ptr<struct<(i32, i32)>>
    %11 = llvm.getelementptr %10[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    llvm.store %arg0, %11 : !llvm.ptr<i32>
    %12 = llvm.getelementptr %10[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    llvm.store %arg1, %12 : !llvm.ptr<i32>
    %13 = llvm.getelementptr %10[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    %14 = llvm.load %13 : !llvm.ptr<i32>
    %15 = llvm.getelementptr %10[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    %16 = llvm.load %15 : !llvm.ptr<i32>
    %17 = call @"$module-0__I32__-"(%14, %16) : (i32, i32) -> i32
    %18 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i32>, i32) -> !llvm.ptr<i32>
    llvm.store %17, %18 : !llvm.ptr<i32>
    %19 = llvm.alloca %c1_i32 x !llvm.struct<(i32, i32)> : (i32) -> !llvm.ptr<struct<(i32, i32)>>
    %20 = llvm.getelementptr %19[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    llvm.store %arg0, %20 : !llvm.ptr<i32>
    %21 = llvm.getelementptr %19[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    llvm.store %arg1, %21 : !llvm.ptr<i32>
    %22 = llvm.getelementptr %19[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    %23 = llvm.load %22 : !llvm.ptr<i32>
    %24 = llvm.getelementptr %19[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    %25 = llvm.load %24 : !llvm.ptr<i32>
    %26 = call @"$module-0__I32__*"(%23, %25) : (i32, i32) -> i32
    %27 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i32>, i32) -> !llvm.ptr<i32>
    llvm.store %26, %27 : !llvm.ptr<i32>
    %28 = llvm.alloca %c1_i32 x !llvm.struct<(i32, i32)> : (i32) -> !llvm.ptr<struct<(i32, i32)>>
    %29 = llvm.getelementptr %28[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    llvm.store %arg0, %29 : !llvm.ptr<i32>
    %30 = llvm.getelementptr %28[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    llvm.store %arg1, %30 : !llvm.ptr<i32>
    %31 = llvm.getelementptr %28[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    %32 = llvm.load %31 : !llvm.ptr<i32>
    %33 = llvm.getelementptr %28[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    %34 = llvm.load %33 : !llvm.ptr<i32>
    %35 = call @"$module-0__I32__/"(%32, %34) : (i32, i32) -> i32
    %36 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i32>, i32) -> !llvm.ptr<i32>
    llvm.store %35, %36 : !llvm.ptr<i32>
    %37 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i32>, i32) -> !llvm.ptr<i32>
    %38 = llvm.load %37 : !llvm.ptr<i32>
    return %38 : i32
  }
  func @"$module-0__simple_fp"(%arg0: f32, %arg1: f32) -> f32 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr<f32>
    %1 = llvm.alloca %c1_i32 x !llvm.struct<(f32, f32)> : (i32) -> !llvm.ptr<struct<(f32, f32)>>
    %c0_i32 = constant 0 : i32
    %2 = llvm.getelementptr %1[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    llvm.store %arg0, %2 : !llvm.ptr<f32>
    %3 = llvm.getelementptr %1[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    llvm.store %arg1, %3 : !llvm.ptr<f32>
    %4 = llvm.getelementptr %1[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    %5 = llvm.load %4 : !llvm.ptr<f32>
    %6 = llvm.getelementptr %1[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    %7 = llvm.load %6 : !llvm.ptr<f32>
    %8 = call @"$module-0__F32__+"(%5, %7) : (f32, f32) -> f32
    %9 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f32>, i32) -> !llvm.ptr<f32>
    llvm.store %8, %9 : !llvm.ptr<f32>
    %10 = llvm.alloca %c1_i32 x !llvm.struct<(f32, f32)> : (i32) -> !llvm.ptr<struct<(f32, f32)>>
    %11 = llvm.getelementptr %10[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    llvm.store %arg0, %11 : !llvm.ptr<f32>
    %12 = llvm.getelementptr %10[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    llvm.store %arg1, %12 : !llvm.ptr<f32>
    %13 = llvm.getelementptr %10[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    %14 = llvm.load %13 : !llvm.ptr<f32>
    %15 = llvm.getelementptr %10[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    %16 = llvm.load %15 : !llvm.ptr<f32>
    %17 = call @"$module-0__F32__-"(%14, %16) : (f32, f32) -> f32
    %18 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f32>, i32) -> !llvm.ptr<f32>
    llvm.store %17, %18 : !llvm.ptr<f32>
    %19 = llvm.alloca %c1_i32 x !llvm.struct<(f32, f32)> : (i32) -> !llvm.ptr<struct<(f32, f32)>>
    %20 = llvm.getelementptr %19[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    llvm.store %arg0, %20 : !llvm.ptr<f32>
    %21 = llvm.getelementptr %19[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    llvm.store %arg1, %21 : !llvm.ptr<f32>
    %22 = llvm.getelementptr %19[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    %23 = llvm.load %22 : !llvm.ptr<f32>
    %24 = llvm.getelementptr %19[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    %25 = llvm.load %24 : !llvm.ptr<f32>
    %26 = call @"$module-0__F32__*"(%23, %25) : (f32, f32) -> f32
    %27 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f32>, i32) -> !llvm.ptr<f32>
    llvm.store %26, %27 : !llvm.ptr<f32>
    %28 = llvm.alloca %c1_i32 x !llvm.struct<(f32, f32)> : (i32) -> !llvm.ptr<struct<(f32, f32)>>
    %29 = llvm.getelementptr %28[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    llvm.store %arg0, %29 : !llvm.ptr<f32>
    %30 = llvm.getelementptr %28[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    llvm.store %arg1, %30 : !llvm.ptr<f32>
    %31 = llvm.getelementptr %28[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    %32 = llvm.load %31 : !llvm.ptr<f32>
    %33 = llvm.getelementptr %28[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(f32, f32)>>, i32, i32) -> !llvm.ptr<f32>
    %34 = llvm.load %33 : !llvm.ptr<f32>
    %35 = call @"$module-0__F32__/"(%32, %34) : (f32, f32) -> f32
    %36 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f32>, i32) -> !llvm.ptr<f32>
    llvm.store %35, %36 : !llvm.ptr<f32>
    %37 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f32>, i32) -> !llvm.ptr<f32>
    %38 = llvm.load %37 : !llvm.ptr<f32>
    return %38 : f32
  }
  func @"$module-0__int_upcast"(%arg0: i32, %arg1: i64) -> i64 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %1 = call @"$module-0__I32__ext"(%arg0) : (i32) -> i64
    %c0_i32 = constant 0 : i32
    %2 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %1, %2 : !llvm.ptr<i64>
    %3 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %4 = llvm.alloca %c1_i32 x !llvm.struct<(i64, i64)> : (i32) -> !llvm.ptr<struct<(i64, i64)>>
    %5 = llvm.getelementptr %4[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %6 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %7 = llvm.load %6 : !llvm.ptr<i64>
    llvm.store %7, %5 : !llvm.ptr<i64>
    %8 = llvm.getelementptr %4[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    llvm.store %arg1, %8 : !llvm.ptr<i64>
    %9 = llvm.getelementptr %4[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %10 = llvm.load %9 : !llvm.ptr<i64>
    %11 = llvm.getelementptr %4[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %12 = llvm.load %11 : !llvm.ptr<i64>
    %13 = call @"$module-0__I64__+"(%10, %12) : (i64, i64) -> i64
    %14 = llvm.getelementptr %3[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %13, %14 : !llvm.ptr<i64>
    %15 = llvm.getelementptr %3[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %16 = llvm.load %15 : !llvm.ptr<i64>
    return %16 : i64
  }
  func @"$module-0__fp_upcast"(%arg0: f64, %arg1: f32) -> f64 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr<f64>
    %1 = call @"$module-0__F32__ext"(%arg1) : (f32) -> f64
    %c0_i32 = constant 0 : i32
    %2 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    llvm.store %1, %2 : !llvm.ptr<f64>
    %3 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr<f64>
    %4 = llvm.alloca %c1_i32 x !llvm.struct<(f64, f64)> : (i32) -> !llvm.ptr<struct<(f64, f64)>>
    %5 = llvm.getelementptr %4[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(f64, f64)>>, i32, i32) -> !llvm.ptr<f64>
    llvm.store %arg0, %5 : !llvm.ptr<f64>
    %6 = llvm.getelementptr %4[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(f64, f64)>>, i32, i32) -> !llvm.ptr<f64>
    %7 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    %8 = llvm.load %7 : !llvm.ptr<f64>
    llvm.store %8, %6 : !llvm.ptr<f64>
    %9 = llvm.getelementptr %4[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(f64, f64)>>, i32, i32) -> !llvm.ptr<f64>
    %10 = llvm.load %9 : !llvm.ptr<f64>
    %11 = llvm.getelementptr %4[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(f64, f64)>>, i32, i32) -> !llvm.ptr<f64>
    %12 = llvm.load %11 : !llvm.ptr<f64>
    %13 = call @"$module-0__F64__+"(%10, %12) : (f64, f64) -> f64
    %14 = llvm.getelementptr %3[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    llvm.store %13, %14 : !llvm.ptr<f64>
    %15 = llvm.getelementptr %3[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    %16 = llvm.load %15 : !llvm.ptr<f64>
    return %16 : f64
  }
  func @"$module-0__simple_unsigned"(%arg0: i32, %arg1: i32) {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr<i32>
    %1 = llvm.alloca %c1_i32 x !llvm.struct<(i32, i32)> : (i32) -> !llvm.ptr<struct<(i32, i32)>>
    %c0_i32 = constant 0 : i32
    %2 = llvm.getelementptr %1[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    llvm.store %arg0, %2 : !llvm.ptr<i32>
    %3 = llvm.getelementptr %1[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    llvm.store %arg1, %3 : !llvm.ptr<i32>
    %4 = llvm.getelementptr %1[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    %5 = llvm.load %4 : !llvm.ptr<i32>
    %6 = llvm.getelementptr %1[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i32, i32)>>, i32, i32) -> !llvm.ptr<i32>
    %7 = llvm.load %6 : !llvm.ptr<i32>
    %8 = call @"$module-0__U32__+"(%5, %7) : (i32, i32) -> i32
    %9 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i32>, i32) -> !llvm.ptr<i32>
    llvm.store %8, %9 : !llvm.ptr<i32>
    return
  }
  func @"$module-0__unsigned_upcast"(%arg0: i32, %arg1: i64) -> i64 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %1 = call @"$module-0__U32__ext"(%arg0) : (i32) -> i64
    %c0_i32 = constant 0 : i32
    %2 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %1, %2 : !llvm.ptr<i64>
    %3 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %4 = llvm.alloca %c1_i32 x !llvm.struct<(i64, i64)> : (i32) -> !llvm.ptr<struct<(i64, i64)>>
    %5 = llvm.getelementptr %4[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %6 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %7 = llvm.load %6 : !llvm.ptr<i64>
    llvm.store %7, %5 : !llvm.ptr<i64>
    %8 = llvm.getelementptr %4[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    llvm.store %arg1, %8 : !llvm.ptr<i64>
    %9 = llvm.getelementptr %4[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %10 = llvm.load %9 : !llvm.ptr<i64>
    %11 = llvm.getelementptr %4[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %12 = llvm.load %11 : !llvm.ptr<i64>
    %13 = call @"$module-0__U64__+"(%10, %12) : (i64, i64) -> i64
    %14 = llvm.getelementptr %3[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %13, %14 : !llvm.ptr<i64>
    %15 = llvm.getelementptr %3[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %16 = llvm.load %15 : !llvm.ptr<i64>
    return %16 : i64
  }
  func @"$module-0__literals"() -> f64 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr<i32>
    %c21_i64 = constant 21 : i64
    %1 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %c0_i32 = constant 0 : i32
    %2 = llvm.getelementptr %1[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %c21_i64, %2 : !llvm.ptr<i64>
    %3 = llvm.getelementptr %1[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %4 = llvm.load %3 : !llvm.ptr<i64>
    %5 = call @"$module-0__I64__trunc"(%4) : (i64) -> i32
    %6 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i32>, i32) -> !llvm.ptr<i32>
    llvm.store %5, %6 : !llvm.ptr<i32>
    %7 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %8 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i32>, i32) -> !llvm.ptr<i32>
    %9 = llvm.load %8 : !llvm.ptr<i32>
    %10 = call @"$module-0__I32__ext"(%9) : (i32) -> i64
    %11 = llvm.getelementptr %7[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %10, %11 : !llvm.ptr<i64>
    %c21_i64_0 = constant 21 : i64
    %12 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %13 = llvm.getelementptr %12[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %c21_i64_0, %13 : !llvm.ptr<i64>
    %14 = llvm.alloca %c1_i32 x !llvm.struct<(i64, i64)> : (i32) -> !llvm.ptr<struct<(i64, i64)>>
    %15 = llvm.getelementptr %14[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %16 = llvm.getelementptr %7[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %17 = llvm.load %16 : !llvm.ptr<i64>
    llvm.store %17, %15 : !llvm.ptr<i64>
    %18 = llvm.getelementptr %14[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %19 = llvm.getelementptr %12[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %20 = llvm.load %19 : !llvm.ptr<i64>
    llvm.store %20, %18 : !llvm.ptr<i64>
    %21 = llvm.getelementptr %14[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %22 = llvm.load %21 : !llvm.ptr<i64>
    %23 = llvm.getelementptr %14[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %24 = llvm.load %23 : !llvm.ptr<i64>
    %25 = call @"$module-0__I64__+"(%22, %24) : (i64, i64) -> i64
    %26 = llvm.getelementptr %7[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %25, %26 : !llvm.ptr<i64>
    %27 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr<f32>
    %cst = constant 3.140000e+00 : f64
    %28 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr<f64>
    %29 = llvm.getelementptr %28[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    llvm.store %cst, %29 : !llvm.ptr<f64>
    %30 = llvm.getelementptr %28[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    %31 = llvm.load %30 : !llvm.ptr<f64>
    %32 = call @"$module-0__F64__trunc"(%31) : (f64) -> f32
    %33 = llvm.getelementptr %27[%c0_i32] : (!llvm.ptr<f32>, i32) -> !llvm.ptr<f32>
    llvm.store %32, %33 : !llvm.ptr<f32>
    %34 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr<f64>
    %35 = llvm.getelementptr %27[%c0_i32] : (!llvm.ptr<f32>, i32) -> !llvm.ptr<f32>
    %36 = llvm.load %35 : !llvm.ptr<f32>
    %37 = call @"$module-0__F32__ext"(%36) : (f32) -> f64
    %38 = llvm.getelementptr %34[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    llvm.store %37, %38 : !llvm.ptr<f64>
    %cst_1 = constant 1.500000e-03 : f64
    %39 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr<f64>
    %40 = llvm.getelementptr %39[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    llvm.store %cst_1, %40 : !llvm.ptr<f64>
    %41 = llvm.alloca %c1_i32 x !llvm.struct<(f64, f64)> : (i32) -> !llvm.ptr<struct<(f64, f64)>>
    %42 = llvm.getelementptr %41[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(f64, f64)>>, i32, i32) -> !llvm.ptr<f64>
    %43 = llvm.getelementptr %34[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    %44 = llvm.load %43 : !llvm.ptr<f64>
    llvm.store %44, %42 : !llvm.ptr<f64>
    %45 = llvm.getelementptr %41[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(f64, f64)>>, i32, i32) -> !llvm.ptr<f64>
    %46 = llvm.getelementptr %39[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    %47 = llvm.load %46 : !llvm.ptr<f64>
    llvm.store %47, %45 : !llvm.ptr<f64>
    %48 = llvm.getelementptr %41[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(f64, f64)>>, i32, i32) -> !llvm.ptr<f64>
    %49 = llvm.load %48 : !llvm.ptr<f64>
    %50 = llvm.getelementptr %41[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(f64, f64)>>, i32, i32) -> !llvm.ptr<f64>
    %51 = llvm.load %50 : !llvm.ptr<f64>
    %52 = call @"$module-0__F64__+"(%49, %51) : (f64, f64) -> f64
    %53 = llvm.getelementptr %34[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    llvm.store %52, %53 : !llvm.ptr<f64>
    %54 = llvm.getelementptr %34[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    %55 = llvm.load %54 : !llvm.ptr<f64>
    return %55 : f64
  }
  func @"$module-0__conversions"() -> i64 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr<f64>
    %c42_i64 = constant 42 : i64
    %1 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %c0_i32 = constant 0 : i32
    %2 = llvm.getelementptr %1[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %c42_i64, %2 : !llvm.ptr<i64>
    %3 = llvm.getelementptr %1[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %4 = llvm.load %3 : !llvm.ptr<i64>
    %5 = call @"$module-0__I64__toDouble"(%4) : (i64) -> f64
    %6 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    llvm.store %5, %6 : !llvm.ptr<f64>
    %7 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    %8 = llvm.load %7 : !llvm.ptr<f64>
    %9 = call @"$module-0__F64__neg"(%8) : (f64) -> f64
    %10 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    llvm.store %9, %10 : !llvm.ptr<f64>
    %11 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %12 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    %13 = llvm.load %12 : !llvm.ptr<f64>
    %14 = call @"$module-0__F64__toInt"(%13) : (f64) -> i64
    %15 = llvm.getelementptr %11[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %14, %15 : !llvm.ptr<i64>
    %16 = llvm.getelementptr %11[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %17 = llvm.load %16 : !llvm.ptr<i64>
    return %17 : i64
  }
  func @"$module-0__update_value"() -> i64 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %c21_i64 = constant 21 : i64
    %c0_i32 = constant 0 : i32
    %1 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %c21_i64, %1 : !llvm.ptr<i64>
    %c21_i64_0 = constant 21 : i64
    %2 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %3 = llvm.getelementptr %2[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %c21_i64_0, %3 : !llvm.ptr<i64>
    %4 = llvm.alloca %c1_i32 x !llvm.struct<(i64, i64)> : (i32) -> !llvm.ptr<struct<(i64, i64)>>
    %5 = llvm.getelementptr %4[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %6 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %7 = llvm.load %6 : !llvm.ptr<i64>
    llvm.store %7, %5 : !llvm.ptr<i64>
    %8 = llvm.getelementptr %4[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %9 = llvm.getelementptr %2[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %10 = llvm.load %9 : !llvm.ptr<i64>
    llvm.store %10, %8 : !llvm.ptr<i64>
    %11 = llvm.getelementptr %4[%c0_i32, %c0_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %12 = llvm.load %11 : !llvm.ptr<i64>
    %13 = llvm.getelementptr %4[%c0_i32, %c1_i32] : (!llvm.ptr<struct<(i64, i64)>>, i32, i32) -> !llvm.ptr<i64>
    %14 = llvm.load %13 : !llvm.ptr<i64>
    %15 = call @"$module-0__I64__+"(%12, %14) : (i64, i64) -> i64
    %16 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %15, %16 : !llvm.ptr<i64>
    %17 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %18 = llvm.load %17 : !llvm.ptr<i64>
    return %18 : i64
  }
  llvm.mlir.global private constant @std.addi("std.addi")
  llvm.mlir.global private constant @std.subi("std.subi")
  llvm.mlir.global private constant @std.muli("std.muli")
  llvm.mlir.global private constant @std.divi_signed("std.divi_signed")
  llvm.mlir.global private constant @std.sexti("std.sexti")
  llvm.mlir.global private constant @std.zexti("std.zexti")
  llvm.mlir.global private constant @std.trunci("std.trunci")
  llvm.mlir.global private constant @std.sitofp("std.sitofp")
  llvm.mlir.global private constant @std.uitofp("std.uitofp")
  llvm.mlir.global private constant @std.addf("std.addf")
  llvm.mlir.global private constant @std.subf("std.subf")
  llvm.mlir.global private constant @std.mulf("std.mulf")
  llvm.mlir.global private constant @std.divf("std.divf")
  llvm.mlir.global private constant @std.fpext("std.fpext")
  llvm.mlir.global private constant @std.fptrunc("std.fptrunc")
  llvm.mlir.global private constant @std.fptosi("std.fptosi")
  llvm.mlir.global private constant @std.fptoui("std.fptoui")
  llvm.mlir.global private constant @std.negf("std.negf")
}

module @__  {
  func @"____$module-0__simple"(%arg0: i32, %arg1: i32) -> i32 {
    %0 = memref.alloca() : memref<1xi32>
    %c0 = constant 0 : index
    memref.store %arg0, %0[%c0] : memref<1xi32>
    %1 = memref.alloca() : memref<1xi32>
    %c0_0 = constant 0 : index
    memref.store %arg1, %1[%c0_0] : memref<1xi32>
    %2 = memref.alloca() : memref<1xi32>
    %c0_1 = constant 0 : index
    %3 = memref.load %1[%c0_1] : memref<1xi32>
    %c0_2 = constant 0 : index
    %4 = memref.load %0[%c0_2] : memref<1xi32>
    %5 = addi %4, %3 : i32
    %c0_3 = constant 0 : index
    %6 = memref.load %2[%c0_3] : memref<1xi32>
    %c0_4 = constant 0 : index
    memref.store %5, %2[%c0_4] : memref<1xi32>
    %c0_5 = constant 0 : index
    %7 = memref.load %2[%c0_5] : memref<1xi32>
    return %7 : i32
  }
  func @"____$module-0__int_upcast"(%arg0: i32, %arg1: i64) -> i64 {
    %0 = memref.alloca() : memref<1xi32>
    %c0 = constant 0 : index
    memref.store %arg0, %0[%c0] : memref<1xi32>
    %1 = memref.alloca() : memref<1xi64>
    %c0_0 = constant 0 : index
    memref.store %arg1, %1[%c0_0] : memref<1xi64>
    %2 = memref.alloca() : memref<1xi64>
    %c0_1 = constant 0 : index
    %3 = memref.load %1[%c0_1] : memref<1xi64>
    %c0_2 = constant 0 : index
    %4 = memref.load %0[%c0_2] : memref<1xi32>
    %5 = sexti %4 : i32 to i64
    %6 = addi %5, %3 : i64
    %c0_3 = constant 0 : index
    %7 = memref.load %2[%c0_3] : memref<1xi64>
    %c0_4 = constant 0 : index
    memref.store %6, %2[%c0_4] : memref<1xi64>
    %c0_5 = constant 0 : index
    %8 = memref.load %2[%c0_5] : memref<1xi64>
    return %8 : i64
  }
  func @"____$module-0__fp_upcast"(%arg0: f64, %arg1: f32) -> f64 {
    %0 = memref.alloca() : memref<1xf64>
    %c0 = constant 0 : index
    memref.store %arg0, %0[%c0] : memref<1xf64>
    %1 = memref.alloca() : memref<1xf32>
    %c0_0 = constant 0 : index
    memref.store %arg1, %1[%c0_0] : memref<1xf32>
    %2 = memref.alloca() : memref<1xf64>
    %c0_1 = constant 0 : index
    %3 = memref.load %1[%c0_1] : memref<1xf32>
    %c0_2 = constant 0 : index
    %4 = memref.load %0[%c0_2] : memref<1xf64>
    %5 = fpext %3 : f32 to f64
    %6 = addf %4, %5 : f64
    %c0_3 = constant 0 : index
    %7 = memref.load %2[%c0_3] : memref<1xf64>
    %c0_4 = constant 0 : index
    memref.store %6, %2[%c0_4] : memref<1xf64>
    %c0_5 = constant 0 : index
    %8 = memref.load %2[%c0_5] : memref<1xf64>
    return %8 : f64
  }
  func @"____$module-0__literals"() -> f64 {
    %0 = memref.alloca() : memref<1xi32>
    %c21_i64 = constant 21 : i64
    %1 = trunci %c21_i64 : i64 to i32
    %c0 = constant 0 : index
    %2 = memref.load %0[%c0] : memref<1xi32>
    %c0_0 = constant 0 : index
    memref.store %1, %0[%c0_0] : memref<1xi32>
    %3 = memref.alloca() : memref<1xi64>
    %c21_i64_1 = constant 21 : i64
    %4 = memref.alloca() : memref<1xi64>
    %c0_2 = constant 0 : index
    %5 = memref.load %4[%c0_2] : memref<1xi64>
    %c0_3 = constant 0 : index
    memref.store %c21_i64_1, %4[%c0_3] : memref<1xi64>
    %c0_4 = constant 0 : index
    %6 = memref.load %4[%c0_4] : memref<1xi64>
    %c0_5 = constant 0 : index
    %7 = memref.load %0[%c0_5] : memref<1xi32>
    %8 = sexti %7 : i32 to i64
    %9 = addi %8, %6 : i64
    %c0_6 = constant 0 : index
    %10 = memref.load %3[%c0_6] : memref<1xi64>
    %c0_7 = constant 0 : index
    memref.store %9, %3[%c0_7] : memref<1xi64>
    %11 = memref.alloca() : memref<1xf32>
    %cst = constant 3.140000e+00 : f64
    %12 = fptrunc %cst : f64 to f32
    %c0_8 = constant 0 : index
    %13 = memref.load %11[%c0_8] : memref<1xf32>
    %c0_9 = constant 0 : index
    memref.store %12, %11[%c0_9] : memref<1xf32>
    %14 = memref.alloca() : memref<1xf64>
    %cst_10 = constant 1.500000e-03 : f64
    %15 = memref.alloca() : memref<1xf64>
    %c0_11 = constant 0 : index
    %16 = memref.load %15[%c0_11] : memref<1xf64>
    %c0_12 = constant 0 : index
    memref.store %cst_10, %15[%c0_12] : memref<1xf64>
    %c0_13 = constant 0 : index
    %17 = memref.load %15[%c0_13] : memref<1xf64>
    %c0_14 = constant 0 : index
    %18 = memref.load %11[%c0_14] : memref<1xf32>
    %19 = fpext %18 : f32 to f64
    %20 = addf %19, %17 : f64
    %c0_15 = constant 0 : index
    %21 = memref.load %14[%c0_15] : memref<1xf64>
    %c0_16 = constant 0 : index
    memref.store %20, %14[%c0_16] : memref<1xf64>
    %c0_17 = constant 0 : index
    %22 = memref.load %14[%c0_17] : memref<1xf64>
    return %22 : f64
  }
}

module @__  {
  module @"$module-0"  {
    module @U64  {
    }
    func private @foo() -> i64 {
      %c42_i64 = constant 42 : i64
      return %c42_i64 : i64
    }
    func private @bar(%arg0: i64) -> i64 {
      %0 = memref.alloca() : memref<1xi64>
      %c0 = constant 0 : index
      memref.store %arg0, %0[%c0] : memref<1xi64>
      %1 = memref.alloca() : memref<1xi64>
      %c0_0 = constant 0 : index
      %2 = memref.load %1[%c0_0] : memref<1xi64>
      %3 = call @foo() : () -> i64
      %c0_1 = constant 0 : index
      memref.store %3, %1[%c0_1] : memref<1xi64>
      %4 = memref.alloca() : memref<1xi64>
      %c0_2 = constant 0 : index
      %5 = memref.load %4[%c0_2] : memref<1xi64>
      %c0_3 = constant 0 : index
      %6 = memref.load %1[%c0_3] : memref<1xi64>
      %c0_4 = constant 0 : index
      %7 = memref.load %0[%c0_4] : memref<1xi64>
      %8 = addi %7, %6 : i64
      %c0_5 = constant 0 : index
      memref.store %8, %4[%c0_5] : memref<1xi64>
      %c0_6 = constant 0 : index
      %9 = memref.load %4[%c0_6] : memref<1xi64>
      return %9 : i64
    }
    func private @baz(%arg0: i64) -> i64 {
      %0 = memref.alloca() : memref<1xi64>
      %c0 = constant 0 : index
      memref.store %arg0, %0[%c0] : memref<1xi64>
      %1 = memref.alloca() : memref<1xi64>
      %c0_0 = constant 0 : index
      %2 = memref.load %1[%c0_0] : memref<1xi64>
      %c0_1 = constant 0 : index
      %3 = memref.load %0[%c0_1] : memref<1xi64>
      %4 = call @bar(%3) : (i64) -> i64
      %c0_2 = constant 0 : index
      memref.store %4, %1[%c0_2] : memref<1xi64>
      %c0_3 = constant 0 : index
      %5 = memref.load %1[%c0_3] : memref<1xi64>
      return %5 : i64
    }
  }
}

module  {
  llvm.mlir.global private constant @std.trunci("std.trunci")
  func @"$module-0__trunc_64_8"(%arg0: i64) -> i8 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i8 : (i32) -> !llvm.ptr<i8>
    %1 = llvm.mlir.addressof @std.trunci : !llvm.ptr<array<10 x i8>>
    %2 = trunci %arg0 : i64 to i8
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i8>, i32) -> !llvm.ptr<i8>
    %4 = llvm.load %3 : !llvm.ptr<i8>
    %5 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i8>, i32) -> !llvm.ptr<i8>
    llvm.store %2, %5 : !llvm.ptr<i8>
    %6 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i8>, i32) -> !llvm.ptr<i8>
    %7 = llvm.load %6 : !llvm.ptr<i8>
    return %7 : i8
  }
  func @"$module-0__trunc_64_16"(%arg0: i64) -> i16 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i16 : (i32) -> !llvm.ptr<i16>
    %1 = llvm.mlir.addressof @std.trunci : !llvm.ptr<array<10 x i8>>
    %2 = trunci %arg0 : i64 to i16
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i16>, i32) -> !llvm.ptr<i16>
    %4 = llvm.load %3 : !llvm.ptr<i16>
    %5 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i16>, i32) -> !llvm.ptr<i16>
    llvm.store %2, %5 : !llvm.ptr<i16>
    %6 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i16>, i32) -> !llvm.ptr<i16>
    %7 = llvm.load %6 : !llvm.ptr<i16>
    return %7 : i16
  }
  func @"$module-0__trunc_64_32"(%arg0: i64) -> i32 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr<i32>
    %1 = llvm.mlir.addressof @std.trunci : !llvm.ptr<array<10 x i8>>
    %2 = trunci %arg0 : i64 to i32
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i32>, i32) -> !llvm.ptr<i32>
    %4 = llvm.load %3 : !llvm.ptr<i32>
    %5 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i32>, i32) -> !llvm.ptr<i32>
    llvm.store %2, %5 : !llvm.ptr<i32>
    %6 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i32>, i32) -> !llvm.ptr<i32>
    %7 = llvm.load %6 : !llvm.ptr<i32>
    return %7 : i32
  }
  llvm.mlir.global private constant @std.sexti("std.sexti")
  func @"$module-0__ext_64_128"(%arg0: i64) -> i128 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i128 : (i32) -> !llvm.ptr<i128>
    %1 = llvm.mlir.addressof @std.sexti : !llvm.ptr<array<9 x i8>>
    %2 = sexti %arg0 : i64 to i128
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i128>, i32) -> !llvm.ptr<i128>
    %4 = llvm.load %3 : !llvm.ptr<i128>
    %5 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i128>, i32) -> !llvm.ptr<i128>
    llvm.store %2, %5 : !llvm.ptr<i128>
    %6 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i128>, i32) -> !llvm.ptr<i128>
    %7 = llvm.load %6 : !llvm.ptr<i128>
    return %7 : i128
  }
  llvm.mlir.global private constant @std.fptrunc("std.fptrunc")
  func @"$module-0__truncf_64_32"(%arg0: f64) -> f32 {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr<f32>
    %1 = llvm.mlir.addressof @std.fptrunc : !llvm.ptr<array<11 x i8>>
    %2 = fptrunc %arg0 : f64 to f32
    %c0_i32 = constant 0 : i32
    %3 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f32>, i32) -> !llvm.ptr<f32>
    %4 = llvm.load %3 : !llvm.ptr<f32>
    %5 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f32>, i32) -> !llvm.ptr<f32>
    llvm.store %2, %5 : !llvm.ptr<f32>
    %6 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<f32>, i32) -> !llvm.ptr<f32>
    %7 = llvm.load %6 : !llvm.ptr<f32>
    return %7 : f32
  }
  func @"$module-0__foo"() {
    %c1_i32 = constant 1 : i32
    %0 = llvm.alloca %c1_i32 x i8 : (i32) -> !llvm.ptr<i8>
    %c10_i64 = constant 10 : i64
    %1 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %c0_i32 = constant 0 : i32
    %2 = llvm.getelementptr %1[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %c10_i64, %2 : !llvm.ptr<i64>
    %3 = llvm.getelementptr %1[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %4 = llvm.load %3 : !llvm.ptr<i64>
    %5 = call @"$module-0__trunc_64_8"(%4) : (i64) -> i8
    %6 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i8>, i32) -> !llvm.ptr<i8>
    %7 = llvm.load %6 : !llvm.ptr<i8>
    %8 = llvm.getelementptr %0[%c0_i32] : (!llvm.ptr<i8>, i32) -> !llvm.ptr<i8>
    llvm.store %5, %8 : !llvm.ptr<i8>
    %9 = llvm.alloca %c1_i32 x i16 : (i32) -> !llvm.ptr<i16>
    %c123123_i64 = constant 123123 : i64
    %10 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %11 = llvm.getelementptr %10[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %c123123_i64, %11 : !llvm.ptr<i64>
    %12 = llvm.getelementptr %10[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %13 = llvm.load %12 : !llvm.ptr<i64>
    %14 = call @"$module-0__trunc_64_16"(%13) : (i64) -> i16
    %15 = llvm.getelementptr %9[%c0_i32] : (!llvm.ptr<i16>, i32) -> !llvm.ptr<i16>
    %16 = llvm.load %15 : !llvm.ptr<i16>
    %17 = llvm.getelementptr %9[%c0_i32] : (!llvm.ptr<i16>, i32) -> !llvm.ptr<i16>
    llvm.store %14, %17 : !llvm.ptr<i16>
    %18 = llvm.alloca %c1_i32 x i32 : (i32) -> !llvm.ptr<i32>
    %c1000000000_i64 = constant 1000000000 : i64
    %19 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %20 = llvm.getelementptr %19[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %c1000000000_i64, %20 : !llvm.ptr<i64>
    %21 = llvm.getelementptr %19[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %22 = llvm.load %21 : !llvm.ptr<i64>
    %23 = call @"$module-0__trunc_64_32"(%22) : (i64) -> i32
    %24 = llvm.getelementptr %18[%c0_i32] : (!llvm.ptr<i32>, i32) -> !llvm.ptr<i32>
    %25 = llvm.load %24 : !llvm.ptr<i32>
    %26 = llvm.getelementptr %18[%c0_i32] : (!llvm.ptr<i32>, i32) -> !llvm.ptr<i32>
    llvm.store %23, %26 : !llvm.ptr<i32>
    %27 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %c2000000000_i64 = constant 2000000000 : i64
    %28 = llvm.getelementptr %27[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %29 = llvm.load %28 : !llvm.ptr<i64>
    %30 = llvm.getelementptr %27[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %c2000000000_i64, %30 : !llvm.ptr<i64>
    %31 = llvm.alloca %c1_i32 x i128 : (i32) -> !llvm.ptr<i128>
    %c1234567890_i64 = constant 1234567890 : i64
    %32 = llvm.alloca %c1_i32 x i64 : (i32) -> !llvm.ptr<i64>
    %33 = llvm.getelementptr %32[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    llvm.store %c1234567890_i64, %33 : !llvm.ptr<i64>
    %34 = llvm.getelementptr %32[%c0_i32] : (!llvm.ptr<i64>, i32) -> !llvm.ptr<i64>
    %35 = llvm.load %34 : !llvm.ptr<i64>
    %36 = call @"$module-0__ext_64_128"(%35) : (i64) -> i128
    %37 = llvm.getelementptr %31[%c0_i32] : (!llvm.ptr<i128>, i32) -> !llvm.ptr<i128>
    %38 = llvm.load %37 : !llvm.ptr<i128>
    %39 = llvm.getelementptr %31[%c0_i32] : (!llvm.ptr<i128>, i32) -> !llvm.ptr<i128>
    llvm.store %36, %39 : !llvm.ptr<i128>
    %40 = llvm.alloca %c1_i32 x f32 : (i32) -> !llvm.ptr<f32>
    %cst = constant 3.141500e+20 : f64
    %41 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr<f64>
    %42 = llvm.getelementptr %41[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    llvm.store %cst, %42 : !llvm.ptr<f64>
    %43 = llvm.getelementptr %41[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    %44 = llvm.load %43 : !llvm.ptr<f64>
    %45 = call @"$module-0__truncf_64_32"(%44) : (f64) -> f32
    %46 = llvm.getelementptr %40[%c0_i32] : (!llvm.ptr<f32>, i32) -> !llvm.ptr<f32>
    %47 = llvm.load %46 : !llvm.ptr<f32>
    %48 = llvm.getelementptr %40[%c0_i32] : (!llvm.ptr<f32>, i32) -> !llvm.ptr<f32>
    llvm.store %45, %48 : !llvm.ptr<f32>
    %49 = llvm.alloca %c1_i32 x f64 : (i32) -> !llvm.ptr<f64>
    %cst_0 = constant 3.141500e+123 : f64
    %50 = llvm.getelementptr %49[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    %51 = llvm.load %50 : !llvm.ptr<f64>
    %52 = llvm.getelementptr %49[%c0_i32] : (!llvm.ptr<f64>, i32) -> !llvm.ptr<f64>
    llvm.store %cst_0, %52 : !llvm.ptr<f64>
    return
  }
}

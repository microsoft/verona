(entity
  "$module"
  [
    (function
      "for_sum"
      (seq
        [
          (assign (decl "sum") (int-literal 0))
          (assign (decl "iter$0") (invoke (member (local "x") "values") []))
          (while
            (seq [(invoke (member (local "iter$0") "has_value") [])])
            (seq
              [
                (assign
                  (decl "a")
                  (invoke (member (local "iter$0") "apply") []))
                (invoke (member (local "iter$0") "next") [])
                (assign (local "sum") (call "+" (local "sum") [(local "a")]))
              ])))
          (assign (decl "iter$1") (invoke (member (local "x") "values") []))
          (while
            (seq [(invoke (member (local "iter$1") "has_value") [])])
            (seq
              [
                (assign
                  (decl "a")
                  (invoke (member (local "iter$1") "apply") []))
                (invoke (member (local "iter$1") "next") [])
                (assign (local "sum") (call "+" (local "sum") [(local "a")]))
                (assign
                  (decl "iter$2")
                  (invoke (member (local "x") "values") []))
                (while
                  (seq [(invoke (member (local "iter$2") "has_value") [])])
                  (seq
                    [
                      (assign
                        (decl "a")
                        (invoke (member (local "iter$2") "apply") []))
                      (invoke (member (local "iter$2") "next") [])
                      (assign
                        (local "sum")
                        (call "+" (local "sum") [(local "a")]))
                    ])))
              ])))
          (if
            (seq [(invoke (member (local "x") "has_values") [])])
            (seq
              [
                (assign
                  (decl "iter$3")
                  (invoke (member (local "x") "values") []))
                (while
                  (seq [(invoke (member (local "iter$3") "has_value") [])])
                  (seq
                    [
                      (assign
                        (decl "a")
                        (invoke (member (local "iter$3") "apply") []))
                      (invoke (member (local "iter$3") "next") [])
                      (assign
                        (local "sum")
                        (call "+" (local "sum") [(local "a")]))
                    ])))
              ]))
            (seq
              [
                (assign
                  (decl "iter$4")
                  (invoke (member (local "x") "values") []))
                (while
                  (seq [(invoke (member (local "iter$4") "has_value") [])])
                  (seq
                    [
                      (assign
                        (decl "a")
                        (invoke (member (local "iter$4") "apply") []))
                      (invoke (member (local "iter$4") "next") [])
                      (assign
                        (local "sum")
                        (call "+" (local "sum") [(local "a")]))
                    ])))
              ])))
          (return (local "sum"))
        ])))
  ]))
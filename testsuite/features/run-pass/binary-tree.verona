// Copyright Microsoft and Project Verona Contributors.
// SPDX-License-Identifier: MIT

// Creates a binary tree that can be used for either `iso` or `mut` values.
//
// All the nodes in the tree are allocated in the same region as the root
// `Tree`. They however hold values which could be in a child region, if `Tree`
// is instantiated with `iso`.
//
// It would be nice to have the nodes be `iso`s if the values are, enabling
// prompt deallocation of the nodes when removing them. Unfortunately we don't
// (yet) have a way of expressing this in a generic way, since the nodes must be
// `mut` if the values are.
//
// This example shows a couple of interesting features: 
// - Access to nested regions without extracting, when using a `Tree[iso]`.
// - Interfaces, with F-bounded polymorphism, in the form of `T: Comparable[T]`.
// - Operator overloading
// - The `class T` type parameter in `Comparable`, to apply a custom capability
//   to a type parameter (i.e. `T & mut`).
// - Eventually, region annotations in the form of `where return in self`, ...
//   This is not yet enforced in the compiler so we don't have it here.

interface Comparable[class T]
{
  lt(self: mut, other: T & mut): U64 & imm;
}

class Empty { }

class Node[T: iso | mut] {
  left: (Node[T] & mut) | (Empty & iso);
  value: T;
  right: (Node[T] & mut) | (Empty & iso);

  create(value: T, parent: mut): Node[T] & mut
  {
    var result = new Node in parent;
    result.value = value;
    result.left = new Empty;
    result.right = new Empty;
    result
  }
}

class Tree[T: Comparable[T] & (iso | mut)] {
  top: (Node[T] & mut) | (Empty & iso);

  create(): Tree[T] & iso {
    var result = new Tree;
    result.top = new Empty;
    result
  }

  insert(self: mut, value: T) {
    self.top = self._insert(self.top = new Empty, value);
  }

  _insert(self: mut,
          current: (Node[T] & mut) | (Empty & iso),
          value: T): (Node[T] & mut)
  {
    match current
    {
      var e: Empty => Node.create(value, self),
      var n: Node[T] => {
        if (mut-view value) < (mut-view (n.value)) {
          n.left = self._insert(n.left = new Empty, value);
        } else {
          if (mut-view (n.value)) < (mut-view value) {
            n.right = self._insert(n.right = new Empty, value);
          } else {
          }
        };
        n
      },
    }
  }

  _print(self: mut, node: (Node[T] & mut) | (Empty & mut))
  {
    match node
    {
      var e: Empty => {},
      var n: Node[T] => {
        self._print(mut-view (n.left));
        Builtin.print1("{:#}\n", mut-view (n.value));
        self._print(mut-view (n.right));
      },
    };
  }

  print(self: mut)
  {
    self._print(mut-view (self.top));
  }
}

class Value {
  value: U64 & imm;

  create(value: U64 & imm): Value & iso
  {
    var result = new Value;
    result.value = value;
    result
  }

  create_in(value: U64 & imm, parent: mut): Value & mut
  {
    var result = new Value in parent;
    result.value = value;
    result
  }

  lt(self: mut, other: Value & mut): U64 & imm
  {
    self.value < other.value
  }
}

class Main {
  main() {
    Main.test_iso_tree(mut-view (Tree.create()));
    Main.test_mut_tree(mut-view (Tree.create()));
  }

  test_iso_tree(tree: Tree[Value & iso] & mut) {
    tree.insert(Value.create(5));
    tree.insert(Value.create(12));
    tree.insert(Value.create(3));
    tree.insert(Value.create(7));

    // CHECK-L: Value { 3 }
    // CHECK-L: Value { 5 }
    // CHECK-L: Value { 7 }
    // CHECK-L: Value { 12 }
    tree.print();

    // CHECK-L: Tree[(Value & iso(•))] { Node[(Value & iso(•))] { Node[(Value & iso(•))] { Empty, Value { 3 }, Empty }, Value { 5 }, Node[(Value & iso(•))] { Node[(Value & iso(•))] { Empty, Value { 7 }, Empty }, Value { 12 }, Empty } } }
    Builtin.print1("{:#}\n", tree);
  }

  test_mut_tree(tree: Tree[Value & mut] & mut) {
    tree.insert(Value.create_in(4, tree));
    tree.insert(Value.create_in(8, tree));
    tree.insert(Value.create_in(6, tree));
    tree.insert(Value.create_in(100, tree));

    // CHECK-L: Value { 4 }
    // CHECK-L: Value { 6 }
    // CHECK-L: Value { 8 }
    // CHECK-L: Value { 100 }
    tree.print();

    Builtin.print("Done1\n");

    // CHECK-L: Tree[(Value & mut(•))] { Node[(Value & mut(•))] { Empty, Value { 4 }, Node[(Value & mut(•))] { Node[(Value & mut(•))] { Empty, Value { 6 }, Empty }, Value { 8 }, Node[(Value & mut(•))] { Empty, Value { 100 }, Empty } } } }
    Builtin.print1("{:#}\n", tree);

    Builtin.print("Done2");
  }
}

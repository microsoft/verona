module @"$module" {
  func @f(%arg0: !verona.class<"S64">) -> !verona.class<"S64"> attributes {class = !verona.class<"$module">} {
    %0 = "verona.cast"(%arg0) : (!verona.class<"S64">) -> !verona.unknown
    br ^bb1(%0 : !verona.unknown)
  ^bb1(%1: !verona.unknown):  // 2 preds: ^bb0, ^bb6
    %2 = "verona.constant(50)"() : () -> !verona.class<"int">
    %3 = verona.call "<"[%1 : !verona.unknown] (%2 : !verona.class<"int">) : !verona.unknown
    %4 = "verona.cast"(%3) : (!verona.unknown) -> i1
    cond_br %4, ^bb2(%1 : !verona.unknown), ^bb3(%1 : !verona.unknown)
  ^bb2(%5: !verona.unknown):  // pred: ^bb1
    %6 = "verona.constant(1)"() : () -> !verona.class<"int">
    %7 = "verona.cast"(%6) : (!verona.class<"int">) -> !verona.unknown
    br ^bb4(%7 : !verona.unknown)
  ^bb3(%8: !verona.unknown):  // pred: ^bb1
    %9 = "verona.cast"(%8) : (!verona.unknown) -> !verona.class<"S64">
    return %9 : !verona.class<"S64">
  ^bb4(%10: !verona.unknown):  // 2 preds: ^bb2, ^bb5
    %11 = "verona.constant(10)"() : () -> !verona.class<"int">
    %12 = verona.call "<"[%10 : !verona.unknown] (%11 : !verona.class<"int">) : !verona.unknown
    %13 = "verona.cast"(%12) : (!verona.unknown) -> i1
    cond_br %13, ^bb5(%10 : !verona.unknown), ^bb6(%10 : !verona.unknown)
  ^bb5(%14: !verona.unknown):  // pred: ^bb4
    %15 = verona.call "+"[%14 : !verona.unknown] (%5 : !verona.unknown) : !verona.unknown
    br ^bb4(%14 : !verona.unknown)
  ^bb6(%16: !verona.unknown):  // pred: ^bb4
    br ^bb1(%5 : !verona.unknown)
  }
}
// Copyright Microsoft and Project Verona Contributors.
// SPDX-License-Identifier: MIT

// Empty class declaration
class C {  }

// Class with fields only
class D {
  f: U64 & imm;
  g: C & mut;
  h: F32;
  i: F64;
  j: bool;
}

// Class with nested class, some yet-undeclared types
class E {
  a: D;
  b: E;
  // Nested class, showing deep recursion
  class NestE {
    x: G;
  }
  c: F;
  d: G;
}

// Another class using an undeclared type
class F {
  e: G;
}

// G is now declared, and has a static method
class G {
  static foo(a: U32) : F32 { 3.14; }
}

// POD class
class POD {
  a: U32;
  b: F64;
}

bar(c: C, d: D, e: E, ne: NestE, f: F, g: G) {
  // New empty object in new region (entry point)
  let a : C & iso = new C {};
  // New empty object in existing region
  let b : C & iso = new C {} in a;
  // Allocate a POD class
  let p : POD & iso = new POD { a = 42; b = 3.14; };
  // Allocate a POD class, in region
  let q : POD & iso = new POD { a = 21; b = 2.72; } in p;

  // Field read / write
  let var1: U32 & mut = p.a;
  let var2: U32 & mut = q.a;
  q.a = var1 + var2;
  p.a = q.a;
  q.a = (p.a = 1337);

  // Garbage collect
  tidy(c);
  // Drop value
  drop(d);
}

module @"$module" {
  func @f(%arg0: !verona.class<"F32">) -> !verona.class<"F64"> attributes {class = !verona.class<"$module">} {
    %0 = "verona.constant(1)"() : () -> !verona.class<"int">
    %1 = "verona.cast"(%arg0) : (!verona.class<"F32">) -> !verona.unknown
    br ^bb1(%1 : !verona.unknown)
  ^bb1(%2: !verona.unknown):  // 2 preds: ^bb0, ^bb2
    %3 = "verona.constant(5)"() : () -> !verona.class<"int">
    %4 = verona.call "<"[%2 : !verona.unknown] (%3 : !verona.class<"int">) : !verona.unknown
    %5 = "verona.cast"(%4) : (!verona.unknown) -> i1
    cond_br %5, ^bb2(%2 : !verona.unknown), ^bb3(%2 : !verona.unknown)
  ^bb2(%6: !verona.unknown):  // pred: ^bb1
    %7 = "verona.constant(2)"() : () -> !verona.class<"int">
    %8 = "verona.constant(3)"() : () -> !verona.class<"int">
    %9 = verona.call "+"[%7 : !verona.class<"int">] (%8 : !verona.class<"int">) : !verona.unknown
    %10 = verona.call "+"[%6 : !verona.unknown] (%9 : !verona.unknown) : !verona.unknown
    br ^bb1(%6 : !verona.unknown)
  ^bb3(%11: !verona.unknown):  // pred: ^bb1
    %12 = "verona.cast"(%11) : (!verona.unknown) -> !verona.class<"F64">
    return %12 : !verona.class<"F64">
  }
}
module @"$module" {
  module @A {
    func @foo() -> !verona.class<"bool"> attributes {class = !verona.class<"A", "$parent" : class<"$module">>, qualifiers = ["static"]} {
      %0 = "verona.constant(true)"() : () -> !verona.class<"bool">
      return %0 : !verona.class<"bool">
    }
  }
  module @B {
    func @foo() -> !verona.class<"bool"> attributes {class = !verona.class<"B", "$parent" : class<"$module">>, qualifiers = ["static"]} {
      %0 = "verona.constant(false)"() : () -> !verona.class<"bool">
      return %0 : !verona.class<"bool">
    }
  }
  func @empty_declaration() attributes {class = !verona.class<"$module">}
  func @single_arg(!verona.class<"S16">) attributes {class = !verona.class<"$module">}
  func @args_and_ret(!verona.class<"U32">, !verona.class<"S32">) -> !verona.class<"F64"> attributes {class = !verona.class<"$module">}
  func @empty_return() attributes {class = !verona.class<"$module">} {
    return
  }
  func @foo(%arg0: !verona.imm, %arg1: !verona.meet<class<"U64">, imm>) -> !verona.meet<class<"U64">, imm> attributes {class = !verona.class<"$module">} {
    %0 = verona.call "+"[%arg0 : !verona.imm] (%arg1 : !verona.meet<class<"U64">, imm>) : !verona.unknown
    %1 = "verona.cast"(%0) : (!verona.unknown) -> !verona.meet<class<"U64">, imm>
    %2 = "verona.cast"(%0) : (!verona.unknown) -> !verona.meet<class<"U64">, imm>
    return %2 : !verona.meet<class<"U64">, imm>
  }
  func @apply() attributes {class = !verona.class<"$module">} {
    return
  }
}


module @"$module" {
  func @foo(!verona.class<"S32">) attributes {class = !verona.class<"$module">}
  func @f(%arg0: !verona.class<"U64">) attributes {class = !verona.class<"$module">} {
    %0 = "verona.alloca"() : () -> !verona.class<"U64">
    %1 = "verona.store"(%arg0, %0) : (!verona.class<"U64">, !verona.class<"U64">) -> !verona.unknown
    %2 = "verona.constant(0)"() : () -> !verona.class<"int">
    %3 = "verona.alloca"() : () -> !verona.class<"S32">
    %4 = "verona.store"(%2, %3) : (!verona.class<"int">, !verona.class<"S32">) -> !verona.unknown
    %5 = "verona.load"(%0) : (!verona.class<"U64">) -> !verona.unknown
    br ^bb2
  ^bb1:  // pred: ^bb3
    %6 = verona.call "next"[%5 : !verona.unknown] ( : ) : !verona.unknown
    br ^bb2
  ^bb2:  // 2 preds: ^bb0, ^bb1
    %7 = verona.call "has_value"[%5 : !verona.unknown] ( : ) : !verona.unknown
    %8 = "verona.cast"(%7) : (!verona.unknown) -> i1
    cond_br %8, ^bb3, ^bb4
  ^bb3:  // pred: ^bb2
    %9 = verona.call "apply"[%5 : !verona.unknown] ( : ) : !verona.unknown
    %10 = verona.call "foo"[%9 : !verona.unknown] ( : ) : !verona.unknown
    br ^bb1
  ^bb4:  // pred: ^bb2
    return
  }
  func @f2(%arg0: !verona.class<"U64">) attributes {class = !verona.class<"$module">} {
    %0 = "verona.alloca"() : () -> !verona.class<"U64">
    %1 = "verona.store"(%arg0, %0) : (!verona.class<"U64">, !verona.class<"U64">) -> !verona.unknown
    %2 = "verona.constant(0)"() : () -> !verona.class<"int">
    %3 = "verona.alloca"() : () -> !verona.class<"S32">
    %4 = "verona.store"(%2, %3) : (!verona.class<"int">, !verona.class<"S32">) -> !verona.unknown
    %5 = "verona.load"(%0) : (!verona.class<"U64">) -> !verona.unknown
    br ^bb2
  ^bb1:  // 2 preds: ^bb7, ^bb8
    %6 = verona.call "next"[%5 : !verona.unknown] ( : ) : !verona.unknown
    br ^bb2
  ^bb2:  // 2 preds: ^bb0, ^bb1
    %7 = verona.call "has_value"[%5 : !verona.unknown] ( : ) : !verona.unknown
    %8 = "verona.cast"(%7) : (!verona.unknown) -> i1
    cond_br %8, ^bb3, ^bb4
  ^bb3:  // pred: ^bb2
    %9 = verona.call "apply"[%5 : !verona.unknown] ( : ) : !verona.unknown
    %10 = verona.call "foo"[%9 : !verona.unknown] ( : ) : !verona.unknown
    %11 = "verona.constant(5)"() : () -> !verona.class<"int">
    %12 = verona.call ">"[%9 : !verona.unknown] (%11 : !verona.class<"int">) : !verona.unknown
    %13 = "verona.cast"(%12) : (!verona.unknown) -> i1
    cond_br %13, ^bb5, ^bb6
  ^bb4:  // 2 preds: ^bb2, ^bb5
    return
  ^bb5:  // pred: ^bb3
    br ^bb4
  ^bb6:  // pred: ^bb3
    %14 = "verona.constant(2)"() : () -> !verona.class<"int">
    %15 = verona.call "<"[%9 : !verona.unknown] (%14 : !verona.class<"int">) : !verona.unknown
    %16 = "verona.cast"(%15) : (!verona.unknown) -> i1
    cond_br %16, ^bb8, ^bb9
  ^bb7:  // pred: ^bb10
    br ^bb1
  ^bb8:  // pred: ^bb6
    br ^bb1
  ^bb9:  // pred: ^bb6
    %17 = verona.call "foo"[%9 : !verona.unknown] ( : ) : !verona.unknown
    br ^bb10
  ^bb10:  // pred: ^bb9
    br ^bb7
  }
}


module {
  func @foo(!verona.S32)
  func @has_value(!type.unk) -> !type.bool
  func @apply(!type.unk) -> !type.unk
  func @next(!type.unk)
  func @f(%arg0: !verona.U64) {
    %0 = "verona.alloca"() : () -> !type.alloca
    %1 = "verona.store"(%arg0, %0) : (!verona.U64, !type.alloca) -> !type.unk
    %2 = "verona.alloca"() : () -> !type.alloca
    %3 = "verona.constant(0)"() : () -> !type.int
    %4 = "verona.store"(%3, %2) : (!type.int, !type.alloca) -> !type.unk
    %5 = "verona.load"(%0) : (!type.alloca) -> !type.unk
    br ^bb1
  ^bb1:  // 2 preds: ^bb0, ^bb2
    %6 = call @has_value(%5) : (!type.unk) -> !type.bool
    %7 = "verona.cast"(%6) : (!type.bool) -> i1
    cond_br %7, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    %8 = call @apply(%5) : (!type.unk) -> !type.unk
    call @next(%5) : (!type.unk) -> ()
    %9 = "verona.cast"(%8) : (!type.unk) -> !verona.S32
    call @foo(%9) : (!verona.S32) -> ()
    br ^bb1
  ^bb3:  // pred: ^bb1
    return
  }
}
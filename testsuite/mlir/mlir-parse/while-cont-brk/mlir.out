

module {
  func @f(%arg0: none, %arg1: none) -> none {
    %0 = "verona.alloca"() : () -> !type.alloca
    %1 = "verona.store"(%arg0, %0) : (none, !type.alloca) -> !type.unk
    %2 = "verona.alloca"() : () -> !type.alloca
    %3 = "verona.store"(%arg1, %2) : (none, !type.alloca) -> !type.unk
    br ^bb1
  ^bb1:  // 3 preds: ^bb0, ^bb4, ^bb7
    %4 = "verona.load"(%0) : (!type.alloca) -> !type.unk
    %5 = "verona.constant(5)"() : () -> !type.int
    %6 = "verona.lt"(%4, %5) : (!type.unk, !type.int) -> i1
    cond_br %6, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    %7 = "verona.alloca"() : () -> !type.alloca
    %8 = "verona.load"(%7) : (!type.alloca) -> !type.unk
    %9 = "verona.constant(1)"() : () -> !type.int
    %10 = "verona.add"(%8, %9) : (!type.unk, !type.int) -> !type.unk
    %11 = "verona.store"(%10, %7) : (!type.unk, !type.alloca) -> !type.unk
    %12 = "verona.load"(%7) : (!type.alloca) -> !type.unk
    %13 = "verona.load"(%2) : (!type.alloca) -> !type.unk
    %14 = "verona.lt"(%12, %13) : (!type.unk, !type.unk) -> i1
    cond_br %14, ^bb4, ^bb5
  ^bb3:  // 2 preds: ^bb1, ^bb6
    %15 = "verona.load"(%0) : (!type.alloca) -> !type.unk
    %16 = "verona.cast"(%15) : (!type.unk) -> none
    return %16 : none
  ^bb4:  // pred: ^bb2
    br ^bb1
  ^bb5:  // pred: ^bb2
    %17 = "verona.load"(%7) : (!type.alloca) -> !type.unk
    %18 = "verona.load"(%2) : (!type.alloca) -> !type.unk
    %19 = "verona.gt"(%17, %18) : (!type.unk, !type.unk) -> i1
    cond_br %19, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    br ^bb3
  ^bb7:  // pred: ^bb5
    br ^bb1
  }
}


module {
  func @f(%arg0: !verona.U32) -> !verona.U32 {
    %0 = "verona.alloca"() : () -> !type.alloca
    %1 = "verona.store"(%arg0, %0) : (!verona.U32, !type.alloca) -> !type.unk
    br ^bb1
  ^bb1:  // 2 preds: ^bb0, ^bb2
    %2 = "verona.load"(%0) : (!type.alloca) -> !type.unk
    %3 = "verona.constant(5)"() : () -> !type.int
    %4 = "verona.lt"(%2, %3) : (!type.unk, !type.int) -> i1
    cond_br %4, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    %5 = "verona.load"(%0) : (!type.alloca) -> !type.unk
    %6 = "verona.constant(1)"() : () -> !type.int
    %7 = "verona.add"(%5, %6) : (!type.unk, !type.int) -> !type.unk
    %8 = "verona.store"(%7, %0) : (!type.unk, !type.alloca) -> !type.unk
    br ^bb1
  ^bb3:  // pred: ^bb1
    br ^bb4
  ^bb4:  // 2 preds: ^bb3, ^bb5
    %9 = "verona.constant(false)"() : () -> !type.bool
    %10 = "verona.cast"(%9) : (!type.bool) -> i1
    cond_br %10, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %11 = "verona.load"(%0) : (!type.alloca) -> !type.unk
    %12 = "verona.constant(1)"() : () -> !type.int
    %13 = "verona.sub"(%11, %12) : (!type.unk, !type.int) -> !type.unk
    %14 = "verona.store"(%13, %0) : (!type.unk, !type.alloca) -> !type.unk
    br ^bb4
  ^bb6:  // pred: ^bb4
    %15 = "verona.load"(%0) : (!type.alloca) -> !type.unk
    %16 = "verona.cast"(%15) : (!type.unk) -> !verona.U32
    return %16 : !verona.U32
  }
}
module @"$module" {
  func @simple_with_bypass(%arg0: !verona.class<"U16">, %arg1: !verona.class<"U16">) -> !verona.class<"S16"> attributes {class = !verona.class<"$module">} {
    %0 = verona.call "=="[%arg0 : !verona.class<"U16">] (%arg1 : !verona.class<"U16">) : !verona.unknown
    %1 = "verona.cast"(%0) : (!verona.unknown) -> i1
    %2 = "verona.cast"(%arg1) : (!verona.class<"U16">) -> !verona.unknown
    cond_br %1, ^bb1, ^bb2(%2 : !verona.unknown)
  ^bb1:  // pred: ^bb0
    %3 = "verona.constant(42)"() : () -> !verona.class<"int">
    %4 = "verona.cast"(%3) : (!verona.class<"int">) -> !verona.unknown
    br ^bb2(%4 : !verona.unknown)
  ^bb2(%5: !verona.unknown):  // 2 preds: ^bb0, ^bb1
    %6 = verona.call "+"[%arg0 : !verona.class<"U16">] (%5 : !verona.unknown) : !verona.unknown
    %7 = "verona.cast"(%6) : (!verona.unknown) -> !verona.class<"S16">
    return %7 : !verona.class<"S16">
  }
  func @chain(%arg0: !verona.class<"U16">) -> !verona.class<"S16"> attributes {class = !verona.class<"$module">} {
    %0 = "verona.constant(2)"() : () -> !verona.class<"int">
    %1 = verona.call "<"[%arg0 : !verona.class<"U16">] (%0 : !verona.class<"int">) : !verona.unknown
    %2 = "verona.cast"(%1) : (!verona.unknown) -> i1
    cond_br %2, ^bb1, ^bb2
  ^bb1:  // pred: ^bb0
    %3 = "verona.constant(1)"() : () -> !verona.class<"int">
    %4 = verona.call "+"[%arg0 : !verona.class<"U16">] (%3 : !verona.class<"int">) : !verona.unknown
    br ^bb3(%4 : !verona.unknown)
  ^bb2:  // pred: ^bb0
    %5 = "verona.constant(true)"() : () -> !verona.class<"bool">
    %6 = "verona.cast"(%5) : (!verona.class<"bool">) -> i1
    cond_br %6, ^bb4, ^bb5
  ^bb3(%7: !verona.unknown):  // 2 preds: ^bb1, ^bb6
    %8 = "verona.cast"(%7) : (!verona.unknown) -> !verona.class<"S16">
    return %8 : !verona.class<"S16">
  ^bb4:  // pred: ^bb2
    %9 = "verona.constant(1)"() : () -> !verona.class<"int">
    %10 = verona.call "-"[%arg0 : !verona.class<"U16">] (%9 : !verona.class<"int">) : !verona.unknown
    br ^bb6(%10 : !verona.unknown)
  ^bb5:  // pred: ^bb2
    %11 = "verona.constant(0)"() : () -> !verona.class<"int">
    %12 = "verona.cast"(%11) : (!verona.class<"int">) -> !verona.unknown
    br ^bb6(%12 : !verona.unknown)
  ^bb6(%13: !verona.unknown):  // 2 preds: ^bb4, ^bb5
    br ^bb3(%13 : !verona.unknown)
  }
  func @diamond(%arg0: !verona.class<"U16">, %arg1: !verona.class<"U16">) -> !verona.class<"S16"> attributes {class = !verona.class<"$module">} {
    %0 = verona.call ">"[%arg0 : !verona.class<"U16">] (%arg1 : !verona.class<"U16">) : !verona.unknown
    %1 = "verona.cast"(%0) : (!verona.unknown) -> i1
    cond_br %1, ^bb1, ^bb2
  ^bb1:  // pred: ^bb0
    %2 = "verona.constant(10)"() : () -> !verona.class<"int">
    %3 = "verona.cast"(%2) : (!verona.class<"int">) -> !verona.unknown
    %4 = "verona.cast"(%arg1) : (!verona.class<"U16">) -> !verona.unknown
    br ^bb3(%3, %4 : !verona.unknown, !verona.unknown)
  ^bb2:  // pred: ^bb0
    %5 = "verona.constant(20)"() : () -> !verona.class<"int">
    %6 = "verona.cast"(%arg0) : (!verona.class<"U16">) -> !verona.unknown
    %7 = "verona.cast"(%5) : (!verona.class<"int">) -> !verona.unknown
    br ^bb3(%6, %7 : !verona.unknown, !verona.unknown)
  ^bb3(%8: !verona.unknown, %9: !verona.unknown):  // 2 preds: ^bb1, ^bb2
    %10 = verona.call "+"[%8 : !verona.unknown] (%9 : !verona.unknown) : !verona.unknown
    %11 = "verona.cast"(%10) : (!verona.unknown) -> !verona.class<"S16">
    return %11 : !verona.class<"S16">
  }
  func @double_diamond(%arg0: !verona.class<"bool">, %arg1: !verona.class<"U16">, %arg2: !verona.class<"U16">, %arg3: !verona.class<"U16">, %arg4: !verona.class<"U16">) -> !verona.class<"S16"> attributes {class = !verona.class<"$module">} {
    %0 = "verona.cast"(%arg0) : (!verona.class<"bool">) -> i1
    cond_br %0, ^bb1, ^bb2
  ^bb1:  // pred: ^bb0
    %1 = verona.call "=="[%arg1 : !verona.class<"U16">] (%arg2 : !verona.class<"U16">) : !verona.unknown
    %2 = "verona.cast"(%1) : (!verona.unknown) -> i1
    cond_br %2, ^bb4, ^bb5
  ^bb2:  // pred: ^bb0
    %3 = verona.call "=="[%arg3 : !verona.class<"U16">] (%arg4 : !verona.class<"U16">) : !verona.unknown
    %4 = "verona.cast"(%3) : (!verona.unknown) -> i1
    cond_br %4, ^bb7, ^bb8
  ^bb3(%5: !verona.unknown, %6: !verona.unknown, %7: !verona.unknown, %8: !verona.unknown):  // 2 preds: ^bb6, ^bb9
    %9 = verona.call "+"[%5 : !verona.unknown] (%6 : !verona.unknown) : !verona.unknown
    %10 = verona.call "+"[%7 : !verona.unknown] (%8 : !verona.unknown) : !verona.unknown
    %11 = "verona.cast"(%10) : (!verona.unknown) -> !verona.class<"S16">
    return %11 : !verona.class<"S16">
  ^bb4:  // pred: ^bb1
    %12 = "verona.constant(1)"() : () -> !verona.class<"int">
    %13 = "verona.cast"(%12) : (!verona.class<"int">) -> !verona.unknown
    %14 = "verona.cast"(%arg2) : (!verona.class<"U16">) -> !verona.unknown
    br ^bb6(%13, %14 : !verona.unknown, !verona.unknown)
  ^bb5:  // pred: ^bb1
    %15 = "verona.constant(2)"() : () -> !verona.class<"int">
    %16 = "verona.cast"(%arg1) : (!verona.class<"U16">) -> !verona.unknown
    %17 = "verona.cast"(%15) : (!verona.class<"int">) -> !verona.unknown
    br ^bb6(%16, %17 : !verona.unknown, !verona.unknown)
  ^bb6(%18: !verona.unknown, %19: !verona.unknown):  // 2 preds: ^bb4, ^bb5
    %20 = "verona.cast"(%arg3) : (!verona.class<"U16">) -> !verona.unknown
    %21 = "verona.cast"(%arg4) : (!verona.class<"U16">) -> !verona.unknown
    br ^bb3(%18, %19, %20, %21 : !verona.unknown, !verona.unknown, !verona.unknown, !verona.unknown)
  ^bb7:  // pred: ^bb2
    %22 = "verona.constant(3)"() : () -> !verona.class<"int">
    %23 = "verona.cast"(%22) : (!verona.class<"int">) -> !verona.unknown
    %24 = "verona.cast"(%arg4) : (!verona.class<"U16">) -> !verona.unknown
    br ^bb9(%23, %24 : !verona.unknown, !verona.unknown)
  ^bb8:  // pred: ^bb2
    %25 = "verona.constant(4)"() : () -> !verona.class<"int">
    %26 = "verona.cast"(%arg3) : (!verona.class<"U16">) -> !verona.unknown
    %27 = "verona.cast"(%25) : (!verona.class<"int">) -> !verona.unknown
    br ^bb9(%26, %27 : !verona.unknown, !verona.unknown)
  ^bb9(%28: !verona.unknown, %29: !verona.unknown):  // 2 preds: ^bb7, ^bb8
    %30 = "verona.cast"(%arg1) : (!verona.class<"U16">) -> !verona.unknown
    %31 = "verona.cast"(%arg2) : (!verona.class<"U16">) -> !verona.unknown
    br ^bb3(%30, %31, %28, %29 : !verona.unknown, !verona.unknown, !verona.unknown, !verona.unknown)
  }
  module @A {
    func @m() -> !verona.class<"A", "$parent" : class<"$module">, "x" : class<"U32">> attributes {class = !verona.class<"A", "$parent" : class<"$module">, "x" : class<"U32">>}
  }
  func @method_test(%arg0: !verona.meet<class<"A", "$parent" : class<"$module">, "x" : class<"U32">>, mut>) -> !verona.class<"U32"> attributes {class = !verona.class<"$module">} {
    %0 = "verona.constant(true)"() : () -> !verona.class<"bool">
    %1 = "verona.cast"(%0) : (!verona.class<"bool">) -> i1
    %2 = "verona.cast"(%arg0) : (!verona.meet<class<"A", "$parent" : class<"$module">, "x" : class<"U32">>, mut>) -> !verona.unknown
    cond_br %1, ^bb1, ^bb2(%2 : !verona.unknown)
  ^bb1:  // pred: ^bb0
    %3 = verona.call "m"[%arg0 : !verona.meet<class<"A", "$parent" : class<"$module">, "x" : class<"U32">>, mut>] ( : ) : !verona.unknown
    br ^bb2(%3 : !verona.unknown)
  ^bb2(%4: !verona.unknown):  // 2 preds: ^bb0, ^bb1
    %5 = verona.field_read %4["x"] : !verona.unknown -> !verona.unknown
    %6 = "verona.cast"(%5) : (!verona.unknown) -> !verona.class<"U32">
    return %6 : !verona.class<"U32">
  }
}